import React, { useState, useEffect, useCallback } from "react";
import axios from "axios";
import {
  Accordion,
  AccordionSummary,
  AccordionDetails,
  Typography,
  Checkbox,
  TextField,
  FormControl,
  Select,
  MenuItem,
  IconButton,
} from "@mui/material";
import { DataGrid } from "@mui/x-data-grid";
import { ExpandMore } from "@mui/icons-material";

// Secure API Fetch Function
const fetchCSFScopeData = async () => {
  try {
    const response = await axios.get("/api/v1/GetCSFScopeData", {
      headers: { "Content-Type": "application/json" },
    });
    return Array.isArray(response.data) ? response.data : [];
  } catch (error) {
    console.error("Error fetching CSF Scope data:", error);
    return [];
  }
};

const CSFScopeTable = () => {
  const [scopeData, setScopeData] = useState([]);
  const [loading, setLoading] = useState(true);
  const [expandedSubcategories, setExpandedSubcategories] = useState({});

  // Fetch data securely
  useEffect(() => {
    let isMounted = true;
    fetchCSFScopeData().then((data) => {
      if (isMounted) {
        setScopeData(formatScopeData(data));
        setLoading(false);
      }
    });
    return () => (isMounted = false);
  }, []);

  // Transform API response into grouped format
  const formatScopeData = useCallback((data) => {
    const groupedSubcategories = {};
    data.forEach((item) => {
      if (!groupedSubcategories[item.subcategoryId]) {
        groupedSubcategories[item.subcategoryId] = {
          id: `subcat-${item.subcategoryId}`,
          subcategoryName: item.subcategoryName,
          subcategoryDescription: item.subcategoryDescription,
          relatedCsf1_1Subcategories: item.relatedCsf1_1Subcategories,
          businessUnits: [],
        };
      }
      groupedSubcategories[item.subcategoryId].businessUnits.push(item);
    });

    return Object.values(groupedSubcategories);
  }, []);

  // Toggle Accordion Expansion
  const toggleAccordion = (subcategoryId) => {
    setExpandedSubcategories((prev) => ({
      ...prev,
      [subcategoryId]: !prev[subcategoryId],
    }));
  };

  // Columns for Business Unit DataGrid
  const getBusinessUnitColumns = (businessUnits) => [
    { field: "businessUnitAbbreviation", headerName: "BU Abbr", width: 120 },
    { field: "businessUnitOwner", headerName: "BU Owner", width: 180 },

    // Auditor Fields
    {
      field: "auditorSubcatCustodian",
      headerName: "Auditor Subcat Custodian",
      width: 200,
      renderCell: (params) => (
        <TextField defaultValue={params.value} fullWidth variant="standard" />
      ),
    },
    {
      field: "auditorIsInScope",
      headerName: "Auditor - In Scope?",
      width: 150,
      renderCell: (params) => (
        <Checkbox checked={params.value} />
      ),
    },
    {
      field: "auditorJustification",
      headerName: "Justification",
      width: 250,
      renderCell: (params) =>
        params.row.auditorIsInScope === false ? (
          <TextField defaultValue={params.value} fullWidth variant="standard" />
        ) : null,
    },
    {
      field: "auditorProfileType",
      headerName: "Auditor Profile",
      width: 200,
      renderCell: (params) => (
        <FormControl fullWidth>
          <Select defaultValue={params.value} variant="standard">
            <MenuItem value="Provider">Provider</MenuItem>
            <MenuItem value="Consumer">Consumer</MenuItem>
            <MenuItem value="Inheritor">Inheritor</MenuItem>
            <MenuItem value="Both">Both</MenuItem>
          </Select>
        </FormControl>
      ),
    },
    {
      field: "auditorConsumingFromBusinessUnit",
      headerName: "Consuming From",
      width: 180,
      renderCell: (params) =>
        params.row.auditorProfileType === "Consumer" ||
        params.row.auditorProfileType === "Both" ? (
          <FormControl fullWidth>
            <Select defaultValue={params.value} variant="standard">
              {businessUnits.map((bu) => (
                <MenuItem key={bu.businessUnitAbbreviation} value={bu.businessUnitAbbreviation}>
                  {bu.businessUnitAbbreviation}
                </MenuItem>
              ))}
            </Select>
          </FormControl>
        ) : null,
    },

    // Subcategory Owner Fields (Shown only if Accept Recommendation = No)
    {
      field: "subcatOwnerAcceptRecommendation",
      headerName: "Owner - Accept Recommendation?",
      width: 180,
      renderCell: (params) => (
        <Checkbox checked={params.value} />
      ),
    },
    {
      field: "subcatOwnerIsInScope",
      headerName: "Owner - In Scope?",
      width: 150,
      renderCell: (params) =>
        params.row.subcatOwnerAcceptRecommendation === false ? (
          <Checkbox checked={params.value} />
        ) : null,
    },
    {
      field: "subcatOwnerJustification",
      headerName: "Owner Justification",
      width: 250,
      renderCell: (params) =>
        params.row.subcatOwnerAcceptRecommendation === false &&
        params.row.subcatOwnerIsInScope === false ? (
          <TextField defaultValue={params.value} fullWidth variant="standard" />
        ) : null,
    },
    {
      field: "subcatOwnerProfileType",
      headerName: "Owner Profile",
      width: 200,
      renderCell: (params) =>
        params.row.subcatOwnerAcceptRecommendation === false ? (
          <FormControl fullWidth>
            <Select defaultValue={params.value} variant="standard">
              <MenuItem value="Provider">Provider</MenuItem>
              <MenuItem value="Consumer">Consumer</MenuItem>
              <MenuItem value="Inheritor">Inheritor</MenuItem>
              <MenuItem value="Both">Both</MenuItem>
            </Select>
          </FormControl>
        ) : null,
    },
  ];

  return (
    <div>
      <Typography variant="h5" gutterBottom>
        CSF Scope Data
      </Typography>
      {loading ? (
        <Typography>Loading data...</Typography>
      ) : (
        scopeData.map((subcategory) => (
          <Accordion
            key={subcategory.id}
            expanded={expandedSubcategories[subcategory.id]}
            onChange={() => toggleAccordion(subcategory.id)}
          >
            <AccordionSummary expandIcon={<ExpandMore />}>
              <Typography variant="h6">{subcategory.subcategoryName}</Typography>
            </AccordionSummary>
            <AccordionDetails>
              <Typography variant="body2">
                {subcategory.subcategoryDescription}
              </Typography>
              <DataGrid
                rows={subcategory.businessUnits}
                columns={getBusinessUnitColumns(subcategory.businessUnits)}
                pageSize={5}
                autoHeight
                disableSelectionOnClick
              />
            </AccordionDetails>
          </Accordion>
        ))
      )}
    </div>
  );
};

export default CSFScopeTable;
