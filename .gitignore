import React, { useState, useEffect } from "react";
import {
  Paper, Typography, Box, Button, Snackbar, Alert, CircularProgress
} from "@mui/material";
import axios from "axios";
import ReportFormFilters from "../components/report/ReportFormFilters";
import RiskAreaInput from "../components/report/RiskAreaInput";
import RiskInsightInput from "../components/report/RiskInsightInput";
import RiskMitigationsInput from "../components/report/RiskMitigationsInput";
import RiskAreaTable from "../components/report/RiskAreaTable";
import SaveReminder from "../components/layout/SaveReminder";

// Utility for empty mitigations
const emptyMitigation = () => ({ A: "", B: "", C: "", D: "", E: "" });

function getCurrentQuarterLabel(date = new Date()) {
  const year = date.getFullYear();
  const month = date.getMonth();
  let quarter;
  if (month < 3) quarter = 1;
  else if (month < 6) quarter = 2;
  else if (month < 9) quarter = 3;
  else quarter = 4;
  return `FY${year} Q${quarter}`;
}

const ReportForm = () => {
  // All state here
  const [vendors, setVendors] = useState([]);
  const [selectedVendor, setSelectedVendor] = useState("");
  const [pcmIds, setPcmIds] = useState([]);
  const [selectedPCM, setSelectedPCM] = useState("");
  const [riskAreaOptions, setRiskAreaOptions] = useState([]);
  const [riskArea, setRiskArea] = useState("");
  const [showOtherRiskArea, setShowOtherRiskArea] = useState(false);
  const [riskAreaDropdownValue, setRiskAreaDropdownValue] = useState("");
  const [riskInsight, setRiskInsight] = useState("");
  const [mitigations, setMitigations] = useState(emptyMitigation());
  const [riskAreasList, setRiskAreasList] = useState([]);
  const [loading, setLoading] = useState({
    vendor: false,
    pcm: false,
    riskArea: false,
    data: false
  });
  const [editIndex, setEditIndex] = useState(null);
  const [snackbar, setSnackbar] = useState({ open: false, message: "", severity: "success" });

  const currentQuarter = getCurrentQuarterLabel();

  // --- Fetch Vendors
  useEffect(() => {
    setLoading(l => ({ ...l, vendor: true }));
    axios.get("/GetVendor")
      .then(res => setVendors(res.data || []))
      .finally(() => setLoading(l => ({ ...l, vendor: false })));
  }, []);

  // --- Fetch PCMIDs for Vendor
  useEffect(() => {
    if (!selectedVendor) {
      setPcmIds([]);
      setSelectedPCM("");
      return;
    }
    setLoading(l => ({ ...l, pcm: true }));
    axios.get("/GetPCMID", { params: { vendor: selectedVendor } })
      .then(res => setPcmIds(res.data || []))
      .finally(() => setLoading(l => ({ ...l, pcm: false })));
    setSelectedPCM("");
  }, [selectedVendor]);

  // --- Fetch Risk Areas for Vendor+PCM
  useEffect(() => {
    if (!selectedVendor || !selectedPCM) {
      setRiskAreaOptions([]);
      setRiskArea("");
      setShowOtherRiskArea(false);
      setRiskAreaDropdownValue("");
      return;
    }
    setLoading(l => ({ ...l, riskArea: true }));
    axios.get("/GetRiskArea", { params: { vendor: selectedVendor, pcmid: selectedPCM } })
      .then(res => setRiskAreaOptions(res.data || []))
      .finally(() => setLoading(l => ({ ...l, riskArea: false })));
    setRiskArea("");
  }, [selectedVendor, selectedPCM]);

  // --- Fetch ALL Existing Data for Table (Vendor+PCM)
  useEffect(() => {
    if (!selectedVendor || !selectedPCM) {
      setRiskAreasList([]);
      return;
    }
    setLoading(l => ({ ...l, data: true }));
    axios.get("/GetData", { params: { vendor: selectedVendor, pcmid: selectedPCM } })
      .then(res => {
        if (res.data && Array.isArray(res.data)) {
          setRiskAreasList(res.data.map(row => ({
            riskArea: row.risk_Area,
            riskInsight: row.risk_Insights,
            mitigations: {
              A: row.risk_Mitigation_a || "",
              B: row.risk_Mitigation_b || "",
              C: row.risk_Mitigation_c || "",
              D: row.risk_Mitigation_d || "",
              E: row.risk_Mitigation_e || "",
            }
          })));
        } else {
          setRiskAreasList([]);
        }
      })
      .finally(() => setLoading(l => ({ ...l, data: false })));
  }, [selectedVendor, selectedPCM]);

  // --- Fetch Specific Risk Area Data when Selected
  useEffect(() => {
    if (
      !selectedVendor ||
      !selectedPCM ||
      !riskArea ||
      showOtherRiskArea ||
      !riskAreaOptions.includes(riskArea)
    ) {
      setRiskInsight("");
      setMitigations(emptyMitigation());
      return;
    }
    axios
      .get("/GetData", {
        params: {
          vendor: selectedVendor,
          pcmid: selectedPCM,
          risk_Area: riskArea,
        },
      })
      .then((res) => {
        const data = Array.isArray(res.data) ? res.data[0] : res.data;
        if (data) {
          setRiskInsight(data.risk_Insights || "");
          setMitigations({
            A: data.risk_Mitigation_a || "",
            B: data.risk_Mitigation_b || "",
            C: data.risk_Mitigation_c || "",
            D: data.risk_Mitigation_d || "",
            E: data.risk_Mitigation_e || "",
          });
        } else {
          setRiskInsight("");
          setMitigations(emptyMitigation());
        }
      });
  }, [selectedVendor, selectedPCM, riskArea, showOtherRiskArea, riskAreaOptions]);

  // --- Handlers
  const handleVendorChange = (value) => setSelectedVendor(value || "");
  const handlePCMChange = (e) => setSelectedPCM(e.target.value);

  const handleRiskAreaDropdownChange = (e) => {
    if (e.target.value === "Other") {
      setShowOtherRiskArea(true);
      setRiskAreaDropdownValue("Other");
      setRiskArea("");
      setRiskInsight("");
      setMitigations(emptyMitigation());
    } else {
      setShowOtherRiskArea(false);
      setRiskAreaDropdownValue(e.target.value);
      setRiskArea(e.target.value);
    }
  };

  const handleOtherRiskAreaInputChange = (e) => {
    setRiskArea(e.target.value);
    setRiskInsight("");
    setMitigations(emptyMitigation());
  };

  const handleRiskInsightChange = (e) => setRiskInsight(e.target.value);

  const handleMitigationsChange = (e) => {
    const { name, value } = e.target;
    setMitigations((m) => ({ ...m, [name]: value }));
  };

  // Add/Update to review table
  const handleAddRiskArea = () => {
    const atLeastOneMitigation = Object.values(mitigations).some(val => val.trim() !== "");
    if (!riskArea || !riskInsight || !atLeastOneMitigation) {
      setSnackbar({
        open: true,
        message: "Please enter Risk Area, Risk Insight, and at least one Risk Mitigation.",
        severity: "error"
      });
      return;
    }
    const entry = {
      riskArea,
      riskInsight,
      mitigations: { ...mitigations },
    };
    let updatedList = [...riskAreasList];
    if (editIndex !== null) {
      updatedList[editIndex] = entry;
      setEditIndex(null);
    } else {
      updatedList.push(entry);
    }
    setRiskAreasList(updatedList);
    setRiskArea("");
    setRiskAreaDropdownValue("");
    setRiskInsight("");
    setMitigations(emptyMitigation());
  };

  const canFinalSave =
    (riskAreasList.length > 0) ||
    (riskArea && riskInsight && Object.values(mitigations).some(val => val.trim() !== ""));

  const handleFinalSave = () => {
    setSnackbar({ open: true, message: "Saved!", severity: "success" });
    // Optionally refetch again after save
  };

  const handleEditRiskArea = (idx) => {
    const entry = riskAreasList[idx];
    setEditIndex(idx);
    if (riskAreaOptions.includes(entry.riskArea)) {
      setRiskAreaDropdownValue(entry.riskArea);
      setRiskArea(entry.riskArea);
      setShowOtherRiskArea(false);
    } else {
      setRiskAreaDropdownValue("Other");
      setShowOtherRiskArea(true);
      setRiskArea(entry.riskArea);
    }
    setRiskInsight(entry.riskInsight);
    setMitigations({ ...entry.mitigations });
  };

  const handleDeleteRiskArea = (idx) => {
    setRiskAreasList(riskAreasList.filter((_, i) => i !== idx));
    if (editIndex === idx) setEditIndex(null);
  };

  return (
    <Paper
      elevation={1}
      sx={{
        p: { xs: 2, sm: 3 },
        width: "95%",
        maxWidth: "100%",
        mx: "auto",
        my: 4,
        borderRadius: 2,
        bgcolor: "#fff",
        boxShadow: "0 1px 4px rgba(60,64,67,.08)"
      }}
    >
      <Typography variant="h6" fontWeight={500} sx={{ mb: 2 }}>
        Key Insights & Mitigation Form
      </Typography>

      <ReportFormFilters
        currentQuarter={currentQuarter}
        vendors={vendors}
        pcmIds={pcmIds}
        selectedVendor={selectedVendor}
        selectedPCM={selectedPCM}
        onVendorChange={handleVendorChange}
        onPCMChange={handlePCMChange}
        loadingVendor={loading.vendor}
        loadingPCM={loading.pcm}
      />

      <RiskAreaInput
        riskAreaOptions={riskAreaOptions}
        selectedRiskArea={riskAreaDropdownValue}
        onDropdownChange={handleRiskAreaDropdownChange}
        showOther={showOtherRiskArea}
        otherRiskAreaValue={riskArea}
        onOtherChange={handleOtherRiskAreaInputChange}
        disabled={loading.riskArea || !selectedPCM}
        loading={loading.riskArea}
      />

      <RiskInsightInput
        value={riskInsight}
        onChange={handleRiskInsightChange}
      />

      <RiskMitigationsInput
        mitigations={mitigations}
        onChange={handleMitigationsChange}
      />

      <Box sx={{ mt: 3, display: 'flex', flexDirection: 'column', alignItems: 'flex-end', gap: 1 }}>
        <Button
          variant="outlined"
          onClick={handleAddRiskArea}
          sx={{ px: 4, fontWeight: 700 }}
        >
          {editIndex !== null ? "Update Risk Area" : "Add Risk Area"}
        </Button>
        <SaveReminder />
      </Box>

      <RiskAreaTable
        riskAreasList={riskAreasList}
        onEdit={handleEditRiskArea}
        onDelete={handleDeleteRiskArea}
        vendor={selectedVendor}
        pcmid={selectedPCM}
      />

      <Box sx={{ mt: 4, textAlign: "center" }}>
        <Button
          variant="contained"
          size="large"
          sx={{ px: 6, py: 1.5, fontWeight: 700 }}
          onClick={handleFinalSave}
          disabled={!canFinalSave}
        >
          Save All to Database
        </Button>
      </Box>

      <Snackbar
        open={snackbar.open}
        autoHideDuration={2800}
        onClose={() => setSnackbar({ ...snackbar, open: false })}
        anchorOrigin={{ vertical: "bottom", horizontal: "center" }}
      >
        <Alert
          severity={snackbar.severity}
          onClose={() => setSnackbar({ ...snackbar, open: false })}
          variant="filled"
          sx={{ width: "100%" }}
        >
          {snackbar.message}
        </Alert>
      </Snackbar>
    </Paper>
  );
};

export default ReportForm;
