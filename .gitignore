import React, { useEffect, useState, useMemo } from "react";
import MaterialReactTable from "material-react-table";
import { MenuItem, TextField, Autocomplete, Box, Typography, Dialog, DialogActions, Button } from "@mui/material";
import axios from "axios";

// Profile Type & Business Unit Options
const ProfileTypeOptions = ["Provider", "Consumer", "Both", "Inheritor"];
const BusinessUnitOptions = ["ABC", "UIO", "POA", "SKA-C"];

const CSFScopeTable = () => {
  const [tableData, setTableData] = useState([]);
  const [modalData, setModalData] = useState(null);

  // Fetch Data from API
  useEffect(() => {
    const fetchData = async () => {
      try {
        const response = await axios.get("/api/ScopeData");
        const groupedData = Object.values(
          response.data.reduce((acc, item) => {
            if (!acc[item.subcategoryId]) {
              acc[item.subcategoryId] = {
                subcategoryId: item.subcategoryId,
                subcategoryName: item.subcategoryName,
                subcategoryDescription: item.subcategoryDescription,
                relatedSubcategories: item.relatedCsf1_1Subcategories,
                businessUnits: [],
              };
            }
            acc[item.subcategoryId].businessUnits.push(item);
            return acc;
          }, {})
        );
        setTableData(groupedData);
      } catch (error) {
        console.error("Error fetching scope data:", error);
      }
    };
    fetchData();
  }, []);

  // Open modal and load selected row data
  const openModal = (row) => setModalData({ ...row });

  // Close modal and save changes to table
  const saveModalChanges = () => {
    setTableData((prevData) =>
      prevData.map((subcategory) => ({
        ...subcategory,
        businessUnits: subcategory.businessUnits.map((bu) =>
          bu.businessUnitAbbr === modalData.businessUnitAbbr ? { ...modalData } : bu
        ),
      }))
    );
    setModalData(null);
  };

  // Handle updates inside the modal (live updates within modal)
  const handleModalChange = (field, value) => {
    setModalData((prev) => {
      const updatedData = { ...prev, [field]: value };

      // If `auditorIsInScope` changes, update `auditorJustification`
      if (field === "auditorIsInScope" && value === "Yes") {
        updatedData.auditorJustification = "";
      }

      // If `auditorProfileType` changes, update `auditorConsumingFromBusinessUnit`
      if (field === "auditorProfileType" && !["Consumer", "Both"].includes(value)) {
        updatedData.auditorConsumingFromBusinessUnit = "";
      }

      return updatedData;
    });
  };

  // **Layer 1: Subcategory Level (Multi-Select Filtering)**
  const SubcategoryColumns = useMemo(() => [
    {
      accessorKey: "subcategoryName",
      header: "Subcategory",
      size: 120,
      filterVariant: "multi-select",
      filterSelectOptions: [...new Set(tableData.map((row) => row.subcategoryName))],
    },
    {
      accessorKey: "subcategoryDescription",
      header: "Description",
      size: 300,
      Cell: ({ cell }) => (
        <div style={{ whiteSpace: "normal", wordWrap: "break-word", overflowWrap: "break-word" }}>
          {cell.getValue()}
        </div>
      ),
    },
    { accessorKey: "relatedSubcategories", header: "Related Subcategories" },
  ], [tableData]);

  // **Layer 2: Business Unit Level**
  const BusinessUnitColumns = useMemo(() => [
    { accessorKey: "businessUnitAbbr", header: "BU", enableEditing: false },
    { accessorKey: "businessUnitOwner", header: "BU Owner" },
    { accessorKey: "auditorIsInScope", header: "In Scope?" },
    { accessorKey: "auditorJustification", header: "Justification" },
    { accessorKey: "auditorProfileType", header: "Profile Type" },
    { accessorKey: "auditorConsumingFromBusinessUnit", header: "Consuming From BU" },
  ], []);

  return (
    <>
      <MaterialReactTable
        columns={SubcategoryColumns}
        data={tableData}
        enableExpanding
        enableEditing
        editingMode="modal"
        muiTableBodyCellEditTextFieldProps={{ sx: { minWidth: "600px" } }} // Expanded Modal Width
        enableColumnFilters
        enableHorizontalScroll
        renderDetailPanel={({ row }) => (
          <MaterialReactTable
            columns={BusinessUnitColumns}
            data={row.original.businessUnits}
            enableExpanding
            enableEditing
            editingMode="modal"
            renderDetailPanel={() => (
              <Box p={2} sx={{ backgroundColor: "#f4f4f4", borderRadius: "8px", marginTop: "10px" }}>
                <Typography variant="h6">Profile Type Definitions</Typography>
                <ul>
                  <li><strong>Provider:</strong> Supplies services to other BUs.</li>
                  <li><strong>Consumer:</strong> Receives services from other BUs.</li>
                  <li><strong>Both:</strong> Acts as both Provider & Consumer.</li>
                  <li><strong>Inheritor:</strong> Inherits control from another BU.</li>
                </ul>
              </Box>
            )}
          />
        )}
      />

      {/* Modal for Editing */}
      {modalData && (
        <Dialog open={!!modalData} onClose={() => setModalData(null)} maxWidth="md" fullWidth>
          <Box p={3}>
            <Typography variant="h6" gutterBottom>Edit Business Unit</Typography>
            <TextField
              select
              fullWidth
              label="In Scope?"
              defaultValue={modalData.auditorIsInScope}
              onChange={(e) => handleModalChange("auditorIsInScope", e.target.value)}
            >
              <MenuItem value="Yes">Yes</MenuItem>
              <MenuItem value="No">No</MenuItem>
            </TextField>
            <TextField
              fullWidth
              label="Justification"
              defaultValue={modalData.auditorJustification}
              onChange={(e) => handleModalChange("auditorJustification", e.target.value)}
              disabled={modalData.auditorIsInScope !== "No"}
            />
            <TextField
              select
              fullWidth
              label="Profile Type"
              defaultValue={modalData.auditorProfileType}
              onChange={(e) => handleModalChange("auditorProfileType", e.target.value)}
            >
              {ProfileTypeOptions.map((option) => (
                <MenuItem key={option} value={option}>{option}</MenuItem>
              ))}
            </TextField>
            <TextField
              select
              fullWidth
              label="Consuming From BU"
              defaultValue={modalData.auditorConsumingFromBusinessUnit}
              onChange={(e) => handleModalChange("auditorConsumingFromBusinessUnit", e.target.value)}
              disabled={!["Consumer", "Both"].includes(modalData.auditorProfileType)}
            >
              {BusinessUnitOptions.map((option) => (
                <MenuItem key={option} value={option}>{option}</MenuItem>
              ))}
            </TextField>
            <DialogActions>
              <Button onClick={() => setModalData(null)}>Cancel</Button>
              <Button variant="contained" onClick={saveModalChanges}>Save</Button>
            </DialogActions>
          </Box>
        </Dialog>
      )}
    </>
  );
};

export default CSFScopeTable;
