import React, { useEffect, useMemo, useState } from 'react';
import { MaterialReactTable } from 'material-react-table';
import { MenuItem, TextField, Autocomplete, Box, Typography } from '@mui/material';
import axios from 'axios';

// Dropdown options
const ProfileTypeOptions = ["Provider", "Consumer", "Both", "Inheritor"];
const BusinessUnitOptions = ["ABC", "UIO", "POA", "SKA-C"];

// Function to fetch worker names dynamically
const fetchWorkerNames = async (inputValue) => {
  try {
    const response = await axios.get(`/api/GetWorkerName?search=${inputValue}`);
    return response.data || [];
  } catch (error) {
    console.error("Error fetching worker names:", error);
    return [];
  }
};

const CSFScopeTable = () => {
  const [tableData, setTableData] = useState([]);

  // Fetch data on component mount
  useEffect(() => {
    const fetchData = async () => {
      try {
        const response = await axios.get('/api/ScopeData');
        setTableData(response.data);
      } catch (error) {
        console.error("Error fetching scope data:", error);
      }
    };
    fetchData();
  }, []);

  // Function to save edited row
  const handleSaveRow = ({ row, values }) => {
    const updatedData = [...tableData];
    updatedData[row.index] = values;
    setTableData(updatedData);
  };

  // Subcategory columns (Layer 1)
  const SubcategoryColumns = useMemo(() => [
    {
      accessorKey: 'subcategoryName',
      header: 'Subcategory Name',
    },
    {
      accessorKey: 'subcategoryDescription',
      header: 'Subcategory Description',
    },
    {
      accessorKey: 'relatedCsf1_1Subcategories',
      header: 'Related Subcategories',
      Cell: ({ cell }) => cell.getValue().join(', '),
    },
  ], []);

  // Business Unit columns (Layer 2 - Editable)
  const BusinessUnitColumns = useMemo(() => [
    {
      accessorKey: 'businessUnitAbbr',
      header: 'Business Unit',
    },
    {
      accessorKey: 'businessUnitOwner',
      header: 'Business Unit Owner',
      Cell: ({ cell }) => cell.getValue().join(', '),
      Edit: ({ cell, table }) => (
        <Autocomplete
          multiple
          options={[]}
          defaultValue={cell.getValue() ?? []}
          onChange={async (event, newValue) => {
            const inputValue = newValue.at(-1);
            const workerNames = await fetchWorkerNames(inputValue);
            table.setEditingCellValue(cell.id, workerNames);
          }}
          renderInput={(params) => <TextField {...params} label="Search Owners" />}
        />
      ),
    },
    {
      accessorKey: 'auditorSubcatCustodian',
      header: 'Auditor Subcategory Custodian',
      Cell: ({ cell }) => cell.getValue().join(', '),
      Edit: ({ cell, table }) => (
        <Autocomplete
          multiple
          options={[]}
          defaultValue={cell.getValue() ?? []}
          onChange={async (event, newValue) => {
            const inputValue = newValue.at(-1);
            const workerNames = await fetchWorkerNames(inputValue);
            table.setEditingCellValue(cell.id, workerNames);
          }}
          renderInput={(params) => <TextField {...params} label="Search Custodians" />}
        />
      ),
    },
    {
      accessorKey: 'auditorIsInScope',
      header: 'Auditor Is In Scope',
      Edit: ({ cell, table }) => (
        <TextField
          select
          defaultValue={cell.getValue() ?? ''}
          onChange={(event) => table.setEditingCellValue(cell.id, event.target.value)}
        >
          <MenuItem value="Yes">Yes</MenuItem>
          <MenuItem value="No">No</MenuItem>
        </TextField>
      ),
    },
    {
      accessorKey: 'auditorJustification',
      header: 'Auditor Justification',
      Edit: ({ cell, table }) => (
        <TextField
          defaultValue={cell.getValue() ?? ''}
          onChange={(event) => table.setEditingCellValue(cell.id, event.target.value)}
          disabled={table.getEditingRow()?.getValue('auditorIsInScope') !== 'No'}
        />
      ),
    },
    {
      accessorKey: 'auditorProfileType',
      header: 'Auditor Profile Type',
      Edit: ({ cell, table }) => (
        <TextField
          select
          defaultValue={cell.getValue() ?? ''}
          onChange={(event) => table.setEditingCellValue(cell.id, event.target.value)}
        >
          {ProfileTypeOptions.map((option) => (
            <MenuItem key={option} value={option}>
              {option}
            </MenuItem>
          ))}
        </TextField>
      ),
    },
    {
      accessorKey: 'auditorConsumingFromBusinessUnit',
      header: 'Auditor Consuming From Business Unit',
      Edit: ({ cell, table }) => (
        <TextField
          select
          defaultValue={cell.getValue() ?? ''}
          onChange={(event) => table.setEditingCellValue(cell.id, event.target.value)}
          disabled={!['Consumer', 'Both'].includes(table.getEditingRow()?.getValue('auditorProfileType'))}
        >
          {BusinessUnitOptions.map((option) => (
            <MenuItem key={option} value={option}>
              {option}
            </MenuItem>
          ))}
        </TextField>
      ),
    },
  ], []);

  // Layer 3: Information Panel
  const renderInfoPanel = () => (
    <Box p={2}>
      <Typography variant="h6">Profile Type Definitions:</Typography>
      <ul>
        <li><strong>Provider</strong> - Supplies services to other BUs</li>
        <li><strong>Consumer</strong> - Receives services from other BUs</li>
        <li><strong>Both</strong> - Acts as both Provider & Consumer</li>
        <li><strong>Inheritor</strong> - Inherits control from another BU</li>
      </ul>
    </Box>
  );

  // Render Nested Business Unit Table
  const renderSubRow = ({ row }) => (
    <MaterialReactTable
      columns={BusinessUnitColumns}
      data={row.original.businessUnits}
      enableEditing
      editingMode="modal"
      onEditingRowSave={handleSaveRow}
      renderDetailPanel={renderInfoPanel} // Layer 3: Profile Type Info
    />
  );

  return (
    <MaterialReactTable
      columns={SubcategoryColumns}
      data={tableData}
      enableExpanding
      renderDetailPanel={renderSubRow} // Expands to Layer 2 (BU Level)
    />
  );
};

export default CSFScopeTable;
