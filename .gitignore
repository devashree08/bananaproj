import React, { useState, useEffect, useMemo } from "react";
import axios from "axios";
import MaterialReactTable from "material-react-table";
import {
  Typography,
  CircularProgress,
  Alert,
  Box,
  Select,
  MenuItem,
  Chip,
} from "@mui/material";
import InfoIcon from "@mui/icons-material/Info";
import TextareaAutosize from "@mui/material/TextareaAutosize";

const ScopeManagement = () => {
  const [data, setData] = useState([]);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState(null);

  useEffect(() => {
    const fetchCSFScopeData = async () => {
      try {
        setLoading(true);
        const response = await axios.get("/api/scope");
        setData(response.data);
      } catch (err) {
        console.error("Error fetching CSF scope data:", err);
        setError("Failed to load data. Please try again.");
      } finally {
        setLoading(false);
      }
    };
    fetchCSFScopeData();
  }, []);

  // Test Data (ONLY for Business Unit Owner & Auditor Custodian)
  const businessUnitOwners = ["Owner 1", "Owner 2", "Owner 3"];
  const auditors = ["Auditor A", "Auditor B", "Auditor C"];

  // API Data Values
  const profileTypes = ["Provider", "Contributor", "Both", "Inheritor"];
  const businessUnits = ["ABC", "UIO", "POA", "SKA-C"];

  // Group data by Subcategory â†’ Business Units
  const groupedData = useMemo(() => {
    const subcategoryMap = {};

    data.forEach((item) => {
      if (!subcategoryMap[item.subcategoryName]) {
        subcategoryMap[item.subcategoryName] = {
          ...item,
          businessUnits: [],
        };
      }
      subcategoryMap[item.subcategoryName].businessUnits.push(item);
    });

    return Object.values(subcategoryMap);
  }, [data]);

  const columns = useMemo(
    () => [
      {
        accessorKey: "subcategoryName",
        header: "Subcategory Name",
        enableGrouping: false,
      },
      {
        accessorKey: "subcategoryDescription",
        header: "Description",
        enableGrouping: false,
      },
      {
        accessorKey: "relatedCsf1_1Subcategories",
        header: "Related CSF 1.1",
        enableGrouping: false,
      },
    ],
    []
  );

  const businessUnitColumns = useMemo(
    () => [
      {
        accessorKey: "businessUnitAbbr",
        header: "Business Unit",
      },
      {
        accessorKey: "businessUnitOwner",
        header: "Business Unit Owner",
        enableEditing: true,
        editComponent: ({ cell, row }) => (
          <MultiSelectDropdown
            value={cell.getValue() || []}
            options={businessUnitOwners}
            onChange={(newValue) => row.updateData("businessUnitOwner", newValue)}
          />
        ),
      },
      {
        accessorKey: "auditorSubcatCustodian",
        header: "Auditor Custodian",
        enableEditing: true,
        editComponent: ({ cell, row }) => (
          <MultiSelectDropdown
            value={cell.getValue() || []}
            options={auditors}
            onChange={(newValue) => row.updateData("auditorSubcatCustodian", newValue)}
          />
        ),
      },
      {
        accessorKey: "auditorIsInScope",
        header: "Auditor In Scope?",
        editVariant: "select",
        editSelectOptions: ["Yes", "No"],
      },
      {
        accessorKey: "auditorJustification",
        header: "Auditor Justification",
        enableEditing: (row) => row.original.auditorIsInScope === "No",
        editComponent: ({ cell, row }) => (
          <TextareaAutosize
            minRows={2}
            style={{ width: "100%", fontSize: "14px", resize: "none", overflow: "hidden" }}
            value={cell.getValue() || ""}
            onChange={(e) => row.updateData("auditorJustification", e.target.value)}
          />
        ),
      },
    ],
    []
  );

  return (
    <Box sx={{ padding: "20px" }}>
      {loading ? (
        <CircularProgress sx={{ display: "block", margin: "auto", mt: 4 }} />
      ) : error ? (
        <Alert severity="error">{error}</Alert>
      ) : (
        <MaterialReactTable
          columns={columns}
          data={groupedData}
          enableGrouping
          enableEditing={false} // âœ… Subcategory Level is Non-Editable
          enableExpanding
          muiTableContainerProps={{ sx: { maxHeight: "600px", overflow: "auto" } }} // Sticky Headers
          muiTableHeadCellProps={{
            sx: {
              position: "sticky",
              top: 0,
              backgroundColor: "#f5f5f5",
              zIndex: 2,
            },
          }}
          renderDetailPanel={({ row }) => (
            <MaterialReactTable
              columns={businessUnitColumns}
              data={row.original.businessUnits}
              enableEditing
              editDisplayMode="row" // âœ… Business Unit Level uses Row Editing
              enableExpanding
              renderDetailPanel={({ row }) => <ProfileTypeDefinition />}
              muiTableContainerProps={{ sx: { maxHeight: "400px", overflow: "auto" } }}
              muiTableHeadCellProps={{
                sx: {
                  position: "sticky",
                  top: 0,
                  backgroundColor: "#fafafa",
                  zIndex: 2,
                },
              }}
              enableColumnActions={false} // Remove unwanted column actions
              muiTableBodyRowProps={{
                sx: {
                  '&:nth-of-type(odd)': { backgroundColor: "#f9f9f9" },
                },
              }}
            />
          )}
        />
      )}
    </Box>
  );
};

// ðŸ“– Multi-Select Component (Correctly Implemented)
const MultiSelectDropdown = ({ value, options, onChange }) => {
  return (
    <Select
      multiple
      value={value}
      onChange={(e) => onChange(e.target.value)}
      renderValue={(selected) => (
        <Box sx={{ display: "flex", flexWrap: "wrap", gap: 0.5 }}>
          {selected.map((val) => (
            <Chip key={val} label={val} />
          ))}
        </Box>
      )}
      fullWidth
    >
      {options.map((option) => (
        <MenuItem key={option} value={option}>
          {option}
        </MenuItem>
      ))}
    </Select>
  );
};

// ðŸ“– Detail Panel with Profile Type Definitions
const ProfileTypeDefinition = () => {
  return (
    <Box sx={{ padding: "16px" }}>
      <Typography variant="h6">
        <InfoIcon fontSize="small" /> Profile Type Definitions
      </Typography>
      <Typography>Provider: Provides data to other units.</Typography>
      <Typography>Contributor: Contributes to shared initiatives.</Typography>
      <Typography>Both: Acts as both Provider and Contributor.</Typography>
      <Typography>Inheritor: Receives data but does not contribute.</Typography>
    </Box>
  );
};

export default ScopeManagement;
