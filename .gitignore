import React, { useState, useEffect } from "react";
import axios from "axios";
import {
  Card,
  CardContent,
  Typography,
  Button,
  Collapse,
  Grid,
  FormControl,
  InputLabel,
  Select,
  MenuItem,
  TextField,
  Switch,
  FormControlLabel,
} from "@mui/material";

const ScopeManagement = () => {
  const [data, setData] = useState([]);
  const [expanded, setExpanded] = useState({});

  useEffect(() => {
    axios
      .get("/api/scope")
      .then((response) => setData(response.data))
      .catch((error) => console.error("Error fetching data:", error));
  }, []);

  const handleExpandClick = (subcategoryId) => {
    setExpanded((prev) => ({
      ...prev,
      [subcategoryId]: !prev[subcategoryId],
    }));
  };

  const handleFieldChange = (index, field, value) => {
    setData((prev) =>
      prev.map((item, i) =>
        i === index ? { ...item, [field]: value } : item
      )
    );
  };

  return (
    <div style={{ padding: "20px" }}>
      {data.reduce((acc, item) => {
        if (!acc[item.subcategoryId]) {
          acc[item.subcategoryId] = [];
        }
        acc[item.subcategoryId].push(item);
        return acc;
      }, {}) &&
        Object.entries(
          data.reduce((acc, item) => {
            if (!acc[item.subcategoryId]) {
              acc[item.subcategoryId] = [];
            }
            acc[item.subcategoryId].push(item);
            return acc;
          }, {})
        ).map(([subcategoryId, items]) => (
          <Card key={subcategoryId} sx={{ marginBottom: 2 }}>
            <CardContent>
              <Typography variant="h6">{items[0].subcategoryName}</Typography>
              <Typography variant="body2" color="textSecondary">
                {items[0].subcategoryDescription}
              </Typography>
              <Typography variant="body2">
                Related: {items[0].relatedCsf1_1Subcategories}
              </Typography>
              <Button
                onClick={() => handleExpandClick(subcategoryId)}
                sx={{ marginTop: 1 }}
              >
                {expanded[subcategoryId] ? "Hide Details" : "Show Details"}
              </Button>
            </CardContent>
            <Collapse in={expanded[subcategoryId]}>
              <CardContent>
                <Grid container spacing={2}>
                  {items.map((item, index) => (
                    <Grid item xs={12} key={index}>
                      <Card variant="outlined">
                        <CardContent>
                          <Typography variant="subtitle1">
                            {item.businessUnitAbbr} - {item.businessUnitOwner}
                          </Typography>

                          {/* Auditor Fields */}
                          <FormControl fullWidth margin="normal">
                            <InputLabel>Custodian</InputLabel>
                            <Select
                              value={item.auditorSubcatCustodian || ""}
                              onChange={(e) =>
                                handleFieldChange(
                                  index,
                                  "auditorSubcatCustodian",
                                  e.target.value
                                )
                              }
                            >
                              <MenuItem value="James Charles">
                                James Charles
                              </MenuItem>
                            </Select>
                          </FormControl>

                          <FormControlLabel
                            control={
                              <Switch
                                checked={item.auditorIsInScope || false}
                                onChange={(e) =>
                                  handleFieldChange(
                                    index,
                                    "auditorIsInScope",
                                    e.target.checked
                                  )
                                }
                              />
                            }
                            label="In Scope?"
                          />

                          {!item.auditorIsInScope && (
                            <TextField
                              fullWidth
                              margin="normal"
                              label="Justification"
                              value={item.auditorJustification || ""}
                              onChange={(e) =>
                                handleFieldChange(
                                  index,
                                  "auditorJustification",
                                  e.target.value
                                )
                              }
                            />
                          )}

                          <FormControl fullWidth margin="normal">
                            <InputLabel>Profile Type</InputLabel>
                            <Select
                              value={item.auditorProfileType || ""}
                              onChange={(e) =>
                                handleFieldChange(
                                  index,
                                  "auditorProfileType",
                                  e.target.value
                                )
                              }
                            >
                              <MenuItem value="Consumer">Consumer</MenuItem>
                              <MenuItem value="Both">Both</MenuItem>
                              <MenuItem value="Other">Other</MenuItem>
                            </Select>
                          </FormControl>

                          {(item.auditorProfileType === "Consumer" ||
                            item.auditorProfileType === "Both") && (
                            <FormControl fullWidth margin="normal">
                              <InputLabel>Consuming From</InputLabel>
                              <Select
                                value={item.auditorConsumingFromBusinessUnit || ""}
                                onChange={(e) =>
                                  handleFieldChange(
                                    index,
                                    "auditorConsumingFromBusinessUnit",
                                    e.target.value
                                  )
                                }
                              >
                                {items.map((bu) => (
                                  <MenuItem key={bu.businessUnitAbbr} value={bu.businessUnitAbbr}>
                                    {bu.businessUnitAbbr}
                                  </MenuItem>
                                ))}
                              </Select>
                            </FormControl>
                          )}

                          {/* Subcategory Owner Fields */}
                          <FormControlLabel
                            control={
                              <Switch
                                checked={item.subcatOwnerAcceptRecommendation || false}
                                onChange={(e) =>
                                  handleFieldChange(
                                    index,
                                    "subcatOwnerAcceptRecommendation",
                                    e.target.checked
                                  )
                                }
                              />
                            }
                            label="Accept Recommendation?"
                          />

                          {!item.subcatOwnerAcceptRecommendation && (
                            <>
                              <FormControlLabel
                                control={
                                  <Switch
                                    checked={item.subcatOwnerIsInScope || false}
                                    onChange={(e) =>
                                      handleFieldChange(
                                        index,
                                        "subcatOwnerIsInScope",
                                        e.target.checked
                                      )
                                    }
                                  />
                                }
                                label="Subcat Owner In Scope?"
                              />

                              {!item.subcatOwnerIsInScope && (
                                <TextField
                                  fullWidth
                                  margin="normal"
                                  label="Justification"
                                  value={item.subcatOwnerJustification || ""}
                                  onChange={(e) =>
                                    handleFieldChange(
                                      index,
                                      "subcatOwnerJustification",
                                      e.target.value
                                    )
                                  }
                                />
                              )}

                              <FormControl fullWidth margin="normal">
                                <InputLabel>Profile Type</InputLabel>
                                <Select
                                  value={item.subcatOwnerProfileType || ""}
                                  onChange={(e) =>
                                    handleFieldChange(
                                      index,
                                      "subcatOwnerProfileType",
                                      e.target.value
                                    )
                                  }
                                >
                                  <MenuItem value="Consumer">Consumer</MenuItem>
                                  <MenuItem value="Both">Both</MenuItem>
                                  <MenuItem value="Other">Other</MenuItem>
                                </Select>
                              </FormControl>
                            </>
                          )}
                        </CardContent>
                      </Card>
                    </Grid>
                  ))}
                </Grid>
              </CardContent>
            </Collapse>
          </Card>
        ))}
    </div>
  );
};

export default ScopeManagement;
