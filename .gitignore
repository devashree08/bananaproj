import React, { useEffect, useState } from 'react';
import {
  Accordion,
  AccordionSummary,
  AccordionDetails,
  Typography,
  Table,
  TableHead,
  TableBody,
  TableRow,
  TableCell,
  Button,
  Dialog,
  DialogTitle,
  DialogContent,
  DialogActions,
  TextField,
  MenuItem,
  Box,
  Snackbar,
  Alert,
  TablePagination,
  Collapse
} from '@mui/material';
import ExpandMoreIcon from '@mui/icons-material/ExpandMore';
import axios from 'axios';

// ---------------- WorkerSearchModal ----------------
// Modal for searching workers.
// Users enter First & Last name, click Search (API is called only on click),
// then select one or more workers. On Done, the selected names (comma‑separated)
// are passed back via onSelect.
const WorkerSearchModal = ({ open, onClose, onSelect, initialValue }) => {
  const [firstName, setFirstName] = useState('');
  const [lastName, setLastName] = useState('');
  const [loading, setLoading] = useState(false);
  const [results, setResults] = useState([]);
  const [selected, setSelected] = useState(initialValue ? initialValue.split(', ') : []);
  const [snackbar, setSnackbar] = useState({ open: false, message: '', severity: 'error' });

  const searchWorkers = async () => {
    if (!firstName.trim() || !lastName.trim()) {
      setSnackbar({ open: true, message: 'Please enter both first and last names.', severity: 'error' });
      return;
    }
    setLoading(true);
    try {
      const response = await axios.get('/api/GetWorkerName', {
        params: { FirstName: firstName.trim(), LastName: lastName.trim() }
      });
      if (response.data.length === 0) {
        setSnackbar({ open: true, message: 'No workers found.', severity: 'error' });
      }
      setResults(response.data);
    } catch (error) {
      setSnackbar({ open: true, message: 'Error fetching workers.', severity: 'error' });
      setResults([]);
    } finally {
      setLoading(false);
    }
  };

  const toggleSelect = (nameFull) => {
    if (selected.includes(nameFull)) {
      setSelected(selected.filter(n => n !== nameFull));
    } else {
      setSelected([...selected, nameFull]);
    }
  };

  const handleDone = () => {
    onSelect(selected.join(', '));
    onClose();
  };

  return (
    <Dialog open={open} onClose={onClose} fullWidth maxWidth="sm">
      <DialogTitle>Search Worker</DialogTitle>
      <DialogContent>
        <TextField 
          label="First Name" 
          value={firstName} 
          onChange={e => setFirstName(e.target.value)} 
          fullWidth 
          margin="normal" 
        />
        <TextField 
          label="Last Name" 
          value={lastName} 
          onChange={e => setLastName(e.target.value)} 
          fullWidth 
          margin="normal" 
        />
        <Button onClick={searchWorkers} variant="contained" disabled={loading}>
          {loading ? 'Searching...' : 'Search'}
        </Button>
        {results.length > 0 && (
          <Box mt={2}>
            <Typography variant="subtitle1">Select Worker(s):</Typography>
            {results.map(worker => (
              <Box 
                key={worker.NameFull} 
                display="flex" 
                alignItems="center" 
                onClick={() => toggleSelect(worker.NameFull)}
                sx={{ cursor: 'pointer', py: 0.5 }}
              >
                <input type="checkbox" checked={selected.includes(worker.NameFull)} readOnly style={{ marginRight: 8 }} />
                <Typography>
                  {worker.NameFull} - {worker.JobTitle} (Supervisor: {worker.SupervisorFullName})
                </Typography>
              </Box>
            ))}
          </Box>
        )}
      </DialogContent>
      <DialogActions>
        <Button onClick={onClose}>Cancel</Button>
        <Button onClick={handleDone} variant="contained">Done</Button>
      </DialogActions>
      <Snackbar
        open={snackbar.open}
        autoHideDuration={4000}
        onClose={() => setSnackbar({ ...snackbar, open: false })}
      >
        <Alert onClose={() => setSnackbar({ ...snackbar, open: false })} severity={snackbar.severity}>
          {snackbar.message}
        </Alert>
      </Snackbar>
    </Dialog>
  );
};

// ---------------- EditBusinessUnitModal ----------------
// Modal for editing one Business Unit (Level 2).
// It displays all editable fields in a form.
// For BU Owner and Auditor Custodian, an "Edit" button opens the WorkerSearchModal.
const EditBusinessUnitModal = ({ open, onClose, businessUnit, onSave }) => {
  const [form, setForm] = useState({ ...businessUnit });
  const [workerModalOpen, setWorkerModalOpen] = useState(false);
  const [editingField, setEditingField] = useState('');

  useEffect(() => {
    setForm({ ...businessUnit });
  }, [businessUnit]);

  const handleFieldChange = (field, value) => {
    setForm(prev => ({ ...prev, [field]: value }));
  };

  const openWorkerModal = (field) => {
    setEditingField(field);
    setWorkerModalOpen(true);
  };

  const handleWorkerSelect = (value) => {
    handleFieldChange(editingField, value);
  };

  const handleSave = () => {
    onSave(form);
    onClose();
  };

  return (
    <>
      <Dialog open={open} onClose={onClose} fullWidth maxWidth="sm">
        <DialogTitle>Edit Business Unit</DialogTitle>
        <DialogContent>
          <TextField
            label="BU (Read Only)"
            value={form.businessUnitAbbr}
            fullWidth
            margin="normal"
            disabled
          />
          <Box display="flex" alignItems="center" mb={2}>
            <TextField
              label="BU Owner"
              value={form.businessUnitOwner}
              fullWidth
              margin="normal"
              disabled
            />
            <Button onClick={() => openWorkerModal('businessUnitOwner')} variant="outlined" sx={{ ml: 1 }}>
              Edit
            </Button>
          </Box>
          <Box display="flex" alignItems="center" mb={2}>
            <TextField
              label="Auditor Custodian"
              value={form.auditorSubcatCustodian}
              fullWidth
              margin="normal"
              disabled
            />
            <Button onClick={() => openWorkerModal('auditorSubcatCustodian')} variant="outlined" sx={{ ml: 1 }}>
              Edit
            </Button>
          </Box>
          <TextField
            label="In Scope?"
            value={form.auditorIsInScope}
            onChange={e => handleFieldChange('auditorIsInScope', e.target.value)}
            select
            fullWidth
            margin="normal"
          >
            <MenuItem value="Yes">Yes</MenuItem>
            <MenuItem value="No">No</MenuItem>
          </TextField>
          <TextField
            label="Justification"
            value={form.auditorJustification}
            onChange={e => handleFieldChange('auditorJustification', e.target.value)}
            fullWidth
            margin="normal"
            disabled={form.auditorIsInScope === 'Yes'}
          />
          <TextField
            label="Maturity Projection"
            value={form.maturityProjection}
            onChange={e => handleFieldChange('maturityProjection', e.target.value)}
            select
            fullWidth
            margin="normal"
          >
            {["Increase", "Decrease", "Maintain"].map(option => (
              <MenuItem key={option} value={option}>{option}</MenuItem>
            ))}
          </TextField>
          <TextField
            label="Profile Type"
            value={form.auditorProfileType}
            onChange={e => handleFieldChange('auditorProfileType', e.target.value)}
            select
            fullWidth
            margin="normal"
          >
            {["Provider", "Consumer", "Both", "Inheritor"].map(option => (
              <MenuItem key={option} value={option}>{option}</MenuItem>
            ))}
          </TextField>
          {/* Level 3 Info Panel */}
          <Box sx={{ mt: 1, p: 1, backgroundColor: '#f4f4f4', borderRadius: 1 }}>
            <Typography variant="h6">Profile Type Definitions</Typography>
            <ul>
              <li><strong>Provider:</strong> Supplies services to other BUs.</li>
              <li><strong>Consumer:</strong> Receives services from other BUs.</li>
              <li><strong>Both:</strong> Acts as both Provider & Consumer.</li>
              <li><strong>Inheritor:</strong> Inherits control from another BU.</li>
            </ul>
          </Box>
          <TextField
            label="Consuming From BU"
            value={form.auditorConsumingFromBusinessUnit}
            onChange={e => handleFieldChange('auditorConsumingFromBusinessUnit', e.target.value)}
            select
            fullWidth
            margin="normal"
          >
            {["ABC", "UIO", "POA", "SKA-C", "Other"].map(option => (
              <MenuItem key={option} value={option}>{option}</MenuItem>
            ))}
          </TextField>
          <TextField
            label="Department Name"
            value={form.departmentName}
            onChange={e => handleFieldChange('departmentName', e.target.value)}
            fullWidth
            margin="normal"
          />
        </DialogContent>
        <DialogActions>
          <Button onClick={onClose}>Cancel</Button>
          <Button onClick={handleSave} variant="contained">Save</Button>
        </DialogActions>
      </Dialog>
      <WorkerSearchModal 
        open={workerModalOpen} 
        onClose={() => setWorkerModalOpen(false)}
        onSelect={handleWorkerSelect}
        initialValue={form[editingField]}
      />
    </>
  );
};

// ---------------- CSFScopeAccordion ----------------
// This is our main component using Material‑UI Accordions for Level 1.
// It renders a header row for Subcategory Name, Description, and Related CSF 1.1 Subcats (side by side),
// paginates the master list, and displays a Table (Level 2) inside each Accordion for Business Units.
const CSFScopeAccordion = () => {
  const [data, setData] = useState([]);
  const [currentPage, setCurrentPage] = useState(0);
  const [rowsPerPage] = useState(5); // Pagination for Level 1
  const [editBU, setEditBU] = useState(null);
  const [editModalOpen, setEditModalOpen] = useState(false);

  // Fetch ScopeData and group by subcategoryId
  useEffect(() => {
    const fetchData = async () => {
      try {
        const response = await axios.get('/api/ScopeData');
        const grouped = {};
        response.data.forEach(item => {
          const subcatId = item.subcategoryId;
          if (!grouped[subcatId]) {
            grouped[subcatId] = {
              subcategoryId: subcatId,
              subcategoryName: item.subcategoryName,
              subcategoryDescription: item.subcategoryDescription,
              relatedSubcategories: item.relatedCsf1_1Subcategories,
              businessUnits: []
            };
          }
          // Deduplicate based on businessUnitAbbr.
          if (!grouped[subcatId].businessUnits.find(bu => bu.businessUnitAbbr === item.businessUnitAbbr)) {
            grouped[subcatId].businessUnits.push(item);
          }
        });
        setData(Object.values(grouped));
      } catch (error) {
        console.error('Error fetching scope data:', error);
      }
    };
    fetchData();
  }, []);

  // Pagination for Level 1
  const paginatedData = data.slice(currentPage * rowsPerPage, (currentPage + 1) * rowsPerPage);

  const handleChangePage = (event, newPage) => {
    setCurrentPage(newPage);
  };

  const handleEditBU = (bu) => {
    setEditBU(bu);
    setEditModalOpen(true);
  };

  const handleSaveBU = (newData) => {
    // Update the BU in the appropriate subcategory.
    setData(prev => prev.map(subcat => ({
      ...subcat,
      businessUnits: subcat.businessUnits.map(bu =>
        bu.id === newData.id ? newData : bu
      )
    })));
    setEditModalOpen(false);
  };

  return (
    <Box sx={{ m: 2 }}>
      {/* Header for Level 1 */}
      <Box display="flex" sx={{ borderBottom: '1px solid #ccc', mb: 2, p: 1 }}>
        <Box flex={1}><Typography variant="subtitle1" fontWeight="bold">Subcategory Name</Typography></Box>
        <Box flex={2}><Typography variant="subtitle1" fontWeight="bold">Description</Typography></Box>
        <Box flex={1}><Typography variant="subtitle1" fontWeight="bold">Related CSF 1.1 Subcats</Typography></Box>
      </Box>
      {paginatedData.map(subcat => (
        <Accordion key={subcat.subcategoryId}>
          <AccordionSummary expandIcon={<ExpandMoreIcon />}>
            <Box display="flex" width="100%">
              <Box flex={1}><Typography variant="h6">{subcat.subcategoryName}</Typography></Box>
              <Box flex={2}><Typography variant="body2">{subcat.subcategoryDescription}</Typography></Box>
              <Box flex={1}><Typography variant="caption">{subcat.relatedSubcategories}</Typography></Box>
            </Box>
          </AccordionSummary>
          <AccordionDetails>
            <Table size="small">
              <TableHead>
                <TableRow>
                  <TableCell>BU</TableCell>
                  <TableCell>BU Owner</TableCell>
                  <TableCell>Auditor Custodian</TableCell>
                  <TableCell>In Scope?</TableCell>
                  <TableCell>Justification</TableCell>
                  <TableCell>Maturity Projection</TableCell>
                  <TableCell>Profile Type</TableCell>
                  <TableCell>Consuming From BU</TableCell>
                  <TableCell>Department</TableCell>
                  <TableCell>Info</TableCell>
                  <TableCell>Actions</TableCell>
                </TableRow>
              </TableHead>
              <TableBody>
                {subcat.businessUnits.map(bu => (
                  <React.Fragment key={bu.id}>
                    <TableRow>
                      <TableCell>{bu.businessUnitAbbr}</TableCell>
                      <TableCell>{bu.businessUnitOwner}</TableCell>
                      <TableCell>{bu.auditorSubcatCustodian}</TableCell>
                      <TableCell>{bu.auditorIsInScope}</TableCell>
                      <TableCell>{bu.auditorJustification}</TableCell>
                      <TableCell>{bu.maturityProjection}</TableCell>
                      <TableCell>{bu.auditorProfileType}</TableCell>
                      <TableCell>{bu.auditorConsumingFromBusinessUnit}</TableCell>
                      <TableCell>{bu.departmentName}</TableCell>
                      <TableCell>
                        <Button variant="text" size="small" onClick={() => bu.showInfo = !bu.showInfo}>
                          {bu.showInfo ? "Hide Info" : "Show Info"}
                        </Button>
                      </TableCell>
                      <TableCell>
                        <Button onClick={() => handleEditBU(bu)} variant="outlined" size="small">
                          Edit
                        </Button>
                      </TableCell>
                    </TableRow>
                    {bu.showInfo && (
                      <TableRow>
                        <TableCell colSpan={11} sx={{ backgroundColor: '#f4f4f4', p: 1 }}>
                          <Typography variant="h6">Profile Type Definitions</Typography>
                          <ul>
                            <li><strong>Provider:</strong> Supplies services to other BUs.</li>
                            <li><strong>Consumer:</strong> Receives services from other BUs.</li>
                            <li><strong>Both:</strong> Acts as both Provider & Consumer.</li>
                            <li><strong>Inheritor:</strong> Inherits control from another BU.</li>
                          </ul>
                        </TableCell>
                      </TableRow>
                    )}
                  </React.Fragment>
                ))}
              </TableBody>
            </Table>
          </AccordionDetails>
        </Accordion>
      ))}
      {/* Pagination for Level 1 */}
      <TablePagination
        component="div"
        count={data.length}
        page={currentPage}
        onPageChange={handleChangePage}
        rowsPerPage={rowsPerPage}
        rowsPerPageOptions={[rowsPerPage]}
      />
      {editBU && (
        <EditBusinessUnitModal 
          open={editModalOpen}
          onClose={() => setEditModalOpen(false)}
          businessUnit={editBU}
          onSave={handleSaveBU}
        />
      )}
    </Box>
  );
};

export default CSFScopeAccordion;
