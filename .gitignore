// components/Rescope/CustodianView/CustodianAccordion.jsx
import React, { useEffect, useState } from 'react';
import {
  Accordion,
  AccordionSummary,
  AccordionDetails,
  Typography,
  Box,
  Table,
  TableHead,
  TableBody,
  TableRow,
  TableCell,
  Button,
  TablePagination
} from '@mui/material';
import ExpandMoreIcon from '@mui/icons-material/ExpandMore';
import axios from 'axios';
import CustodianModal from './CustodianModal';

const CustodianAccordion = () => {
  const [data, setData] = useState([]);
  const [page, setPage] = useState(0);
  const [rowsPerPage, setRowsPerPage] = useState(10);
  const [currentBU, setCurrentBU] = useState(null);
  const [modalOpen, setModalOpen] = useState(false);

  // Fetch and group the data by subcategoryId, adding a showAuditor flag to each BU
  const fetchData = async () => {
    try {
      const res = await axios.get('/api/GetBUScopeData');
      const grouped = {};
      res.data.forEach(item => {
        const { subcategoryId, businessUnitAbbr } = item;
        if (!grouped[subcategoryId]) {
          grouped[subcategoryId] = {
            subcategoryId,
            subcategoryName: item.subcategoryName,
            subcategoryDescription: item.subcategoryDescription,
            relatedSubcategories: item.relatedCsf1_1Subcategories,
            businessUnits: []
          };
        }
        // dedupe by BU
        if (
          !grouped[subcategoryId].businessUnits.find(
            bu => bu.businessUnitAbbr === businessUnitAbbr
          )
        ) {
          grouped[subcategoryId].businessUnits.push({
            ...item,
            showAuditor: false, // for toggling Layer 3
          });
        }
      });
      setData(Object.values(grouped));
    } catch (err) {
      console.error('Error fetching scope data', err);
    }
  };

  useEffect(() => {
    fetchData();
  }, []);

  // Pagination helpers
  const paged = data.slice(page * rowsPerPage, (page + 1) * rowsPerPage);
  const handleChangePage = (e, newPage) => setPage(newPage);
  const handleChangeRowsPerPage = e => {
    setRowsPerPage(+e.target.value);
    setPage(0);
  };

  // Toggle per‑BU auditor rec panel
  const toggleAuditorRec = (subcatId, buAbbr) => {
    setData(d =>
      d.map(sc => {
        if (sc.subcategoryId === subcatId) {
          return {
            ...sc,
            businessUnits: sc.businessUnits.map(bu =>
              bu.businessUnitAbbr === buAbbr
                ? { ...bu, showAuditor: !bu.showAuditor }
                : bu
            )
          };
        }
        return sc;
      })
    );
  };

  // Open modal to make changes
  const openModal = bu => {
    setCurrentBU(bu);
    setModalOpen(true);
  };

  // Save callback updates only that one BU
  const handleSave = updated => {
    setData(d =>
      d.map(sc => ({
        ...sc,
        businessUnits: sc.businessUnits.map(bu =>
          bu.businessUnitAbbr === updated.businessUnitAbbr &&
          sc.subcategoryName === updated.subcategoryName
            ? { ...updated, showAuditor: false }
            : bu
        )
      }))
    );
    setModalOpen(false);
  };

  return (
    <Box sx={{ m: 2 }}>
      {paged.map(sc => (
        <Accordion key={sc.subcategoryId}>
          <AccordionSummary expandIcon={<ExpandMoreIcon />}>
            <Box display="flex" width="100%">
              <Box flex={1}>
                <Typography variant="h6">{sc.subcategoryName}</Typography>
              </Box>
              <Box flex={2}>
                <Typography>{sc.subcategoryDescription}</Typography>
              </Box>
              <Box flex={1}>
                <Typography variant="caption">{sc.relatedSubcategories}</Typography>
              </Box>
            </Box>
          </AccordionSummary>

          <AccordionDetails>
            <Table size="small">
              <TableHead sx={{ backgroundColor: 'black' }}>
                <TableRow>
                  {[
                    'BU',
                    'Your Custodian',
                    'In Scope?',
                    'Justification',
                    'Maturity',
                    'Profile Type',
                    'Consuming From BU',
                    'Department',
                    'Info',
                    'Actions'
                  ].map(header => (
                    <TableCell
                      key={header}
                      sx={{ color: 'white', fontWeight: 'bold' }}
                    >
                      {header}
                    </TableCell>
                  ))}
                </TableRow>
              </TableHead>

              <TableBody>
                {sc.businessUnits.map(bu => (
                  <React.Fragment key={bu.businessUnitAbbr}>
                    <TableRow
                      sx={{ '&:hover': { backgroundColor: 'rgba(0,0,0,0.04)' } }}
                    >
                      <TableCell>{bu.businessUnitAbbr}</TableCell>
                      <TableCell>{bu.subcatOwnerSubcatCustodian}</TableCell>
                      <TableCell>{bu.subcatOwnerIsInScope}</TableCell>
                      <TableCell>{bu.subcatOwnerJustification}</TableCell>
                      <TableCell>{bu.subcatOwnerMaturityProjection}</TableCell>
                      <TableCell>{bu.subcatOwnerProfileType}</TableCell>
                      <TableCell>{bu.subcatOwnerConsumingFromBusinessUnit}</TableCell>
                      <TableCell>{bu.subcatOwnerDepartmentName}</TableCell>
                      <TableCell>
                        <Button
                          size="small"
                          onClick={() =>
                            toggleAuditorRec(sc.subcategoryId, bu.businessUnitAbbr)
                          }
                        >
                          {bu.showAuditor ? 'Hide Auditor Rec' : 'Show Auditor Rec'}
                        </Button>
                      </TableCell>
                      <TableCell>
                        <Button
                          size="small"
                          variant="outlined"
                          onClick={() => openModal(bu)}
                        >
                          Make Changes
                        </Button>
                      </TableCell>
                    </TableRow>

                    {/* Layer 3: Auditor Recommendation */}
                    {bu.showAuditor && (
                      <TableRow>
                        <TableCell colSpan={10} sx={{ backgroundColor: '#f4f4f4' }}>
                          <Typography variant="subtitle2">
                            Auditor Recommendation
                          </Typography>
                          <Box sx={{ pl: 2 }}>
                            <Typography>
                              <strong>Custodian:</strong> {bu.auditorSubcatCustodian}
                            </Typography>
                            <Typography>
                              <strong>In Scope?:</strong> {bu.auditorIsInScope}
                            </Typography>
                            <Typography>
                              <strong>Justification:</strong> {bu.auditorJustification}
                            </Typography>
                            <Typography>
                              <strong>Maturity Projection:</strong> {bu.auditorMaturityProjection}
                            </Typography>
                            <Typography>
                              <strong>Profile Type:</strong> {bu.auditorProfileType}
                            </Typography>
                            <Typography>
                              <strong>Consuming From BU:</strong>{' '}
                              {bu.auditorConsumingFromBusinessUnit}
                            </Typography>
                            <Typography>
                              <strong>Department:</strong> {bu.auditorDepartmentName}
                            </Typography>
                          </Box>
                        </TableCell>
                      </TableRow>
                    )}
                  </React.Fragment>
                ))}
              </TableBody>
            </Table>
          </AccordionDetails>
        </Accordion>
      ))}

      {/* Pagination for Level 1 (Subcategories) */}
      <TablePagination
        component="div"
        count={data.length}
        page={page}
        onPageChange={handleChangePage}
        rowsPerPage={rowsPerPage}
        onRowsPerPageChange={handleChangeRowsPerPage}
        rowsPerPageOptions={[10, 20, 50]}
      />

      {/* Modal for making changes */}
      {currentBU && (
        <CustodianModal
          open={modalOpen}
          onClose={() => setModalOpen(false)}
          data={currentBU}
          onSave={handleSave}
        />
      )}
    </Box>
  );
};

export default CustodianAccordion;
