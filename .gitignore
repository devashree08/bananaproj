import React, { useEffect, useState, useCallback, useMemo } from 'react';
import {
  Accordion,
  AccordionSummary,
  AccordionDetails,
  Typography,
  Box,
  Table,
  TableHead,
  TableBody,
  TableRow,
  TableCell,
  IconButton,
  Tooltip,
  Dialog,
  DialogTitle,
  DialogContent,
  DialogActions,
  Button,
  TablePagination,
  Snackbar,
  Alert,
} from '@mui/material';
import ExpandMoreIcon from '@mui/icons-material/ExpandMore';
import CheckIcon from '@mui/icons-material/Check';
import EditIcon from '@mui/icons-material/Edit';
import axios from 'axios';
import ScopeDataFilters from '../Shared/ScopeDataFilters';
import CustodianModal from './CustodianModal';

const CustodianAccordion = () => {
  const [data, setData] = useState([]);
  const [filters, setFilters] = useState(null);
  const [page, setPage] = useState(0);
  const [rowsPerPage, setRowsPerPage] = useState(10);
  const [currentBU, setCurrentBU] = useState(null);
  const [modalOpen, setModalOpen] = useState(false);
  const [confirmOpen, setConfirmOpen] = useState(false);
  const [confirmBU, setConfirmBU] = useState(null);

  // Snackbar state
  const [snackbar, setSnackbar] = useState({ open: false, message: '', severity: 'success' });

  const fetchData = useCallback(async (filterParams) => {
    try {
      const res = await axios.get('/api/GetBUScopeData', { params: filterParams || {} });
      const grouped = {};
      res.data.forEach(item => {
        const { subcategoryId, businessUnitAbbr } = item;
        if (!grouped[subcategoryId]) {
          grouped[subcategoryId] = {
            subcategoryId,
            subcategoryName: item.subcategoryName,
            subcategoryDescription: item.subcategoryDescription,
            relatedSubcategories: item.relatedCsf1_1Subcategories,
            businessUnits: []
          };
        }
        if (!grouped[subcategoryId].businessUnits.some(bu => bu.businessUnitAbbr === businessUnitAbbr)) {
          grouped[subcategoryId].businessUnits.push({ ...item, showAuditor: true });
        }
      });
      setData(Object.values(grouped));
    } catch (err) {
      console.error('Error fetching scope data', err);
      setSnackbar({ open: true, message: 'Failed to load data', severity: 'error' });
    }
  }, []);

  useEffect(() => {
    fetchData(filters);
  }, [fetchData, filters]);

  const handleFilterChange = useCallback((filterValues) => {
    setFilters(filterValues);
    setPage(0);
  }, []);

  const paged = useMemo(() => data.slice(page * rowsPerPage, (page + 1) * rowsPerPage), [data, page, rowsPerPage]);

  const handleChangePage = (_, newPage) => setPage(newPage);
  const handleChangeRowsPerPage = e => {
    setRowsPerPage(+e.target.value);
    setPage(0);
  };

  const toggleAuditorRec = useCallback((subcatId, buAbbr) => {
    setData(d =>
      d.map(sc => {
        if (sc.subcategoryId === subcatId) {
          return {
            ...sc,
            businessUnits: sc.businessUnits.map(bu =>
              bu.businessUnitAbbr === buAbbr ? { ...bu, showAuditor: !bu.showAuditor } : bu
            )
          };
        }
        return sc;
      })
    );
  }, []);

  const openModal = useCallback(bu => {
    setCurrentBU(bu);
    setModalOpen(true);
  }, []);

  const handleSave = useCallback(updated => {
    setData(d =>
      d.map(sc => ({
        ...sc,
        businessUnits: sc.businessUnits.map(bu =>
          bu.businessUnitAbbr === updated.businessUnitAbbr && sc.subcategoryName === updated.subcategoryName
            ? { ...updated, showAuditor: true }
            : bu
        )
      }))
    );
    setModalOpen(false);
    setSnackbar({ open: true, message: 'Changes saved', severity: 'success' });
  }, []);

  const promptAccept = useCallback(bu => {
    setConfirmBU(bu);
    setConfirmOpen(true);
  }, []);

  const confirmAccept = useCallback(async () => {
    setConfirmOpen(false);
    if (!confirmBU) return;
    try {
      await axios.post('/UpdateCustodianBUScopeData', {
        businessUnitAbbr: confirmBU.businessUnitAbbr,
        subcategoryName: confirmBU.subcategoryName,
        subcatOwnerAcceptAuditorRecommendation: 'Yes'
      });
      // copy auditorâ†’owner
      setData(d =>
        d.map(sc => ({
          ...sc,
          businessUnits: sc.businessUnits.map(bu => {
            if (
              bu.businessUnitAbbr === confirmBU.businessUnitAbbr &&
              sc.subcategoryName === confirmBU.subcategoryName
            ) {
              return {
                ...bu,
                subcatOwnerAcceptAuditorRecommendation: 'Yes',
                subcatOwnerSubcatCustodian: bu.auditorSubcatCustodian,
                subcatOwnerIsInScope: bu.auditorIsInScope,
                subcatOwnerJustification: bu.auditorJustification,
                subcatOwnerMaturityProjection: bu.auditorMaturityProjection,
                subcatOwnerProfileType: bu.auditorProfileType,
                subcatOwnerConsumingFromBusinessUnit: bu.auditorConsumingFromBusinessUnit,
                subcatOwnerDepartmentName: bu.auditorDepartmentName
              };
            }
            return bu;
          })
        }))
      );
      setSnackbar({ open: true, message: 'Recommendations accepted', severity: 'success' });
    } catch (err) {
      console.error('Error accepting recommendations', err);
      setSnackbar({ open: true, message: 'Failed to accept recommendations', severity: 'error' });
    }
  }, [confirmBU]);

  const filterOptions = useMemo(() => ({
    subcategoryNames: data.map(d => d.subcategoryName),
    bus: ['ABC','UIO','POA','SKA-C'],
    buOwners: Array.from(new Set(data.flatMap(d => d.businessUnits.map(bu => bu.businessUnitOwner)))),
    subcatCustodians: Array.from(new Set(data.flatMap(d => d.businessUnits.map(bu => bu.subcatOwnerSubcatCustodian)))),
    inScopeOptions: ['Yes','No'],
    profileTypes: ['Provider','Consumer','Both','Inheritor']
  }), [data]);

  return (
    <Box sx={{ m: 2 }}>
      <ScopeDataFilters onFilterChange={handleFilterChange} filterOptions={filterOptions} />

      <Box display="flex" sx={{ borderBottom: '1px solid #ccc', mb: 2, p: 1 }}>
        <Box flex={1}><Typography fontWeight="bold">Subcategory</Typography></Box>
        <Box flex={2}><Typography fontWeight="bold">Description</Typography></Box>
        <Box flex={1}><Typography fontWeight="bold">Related CSF</Typography></Box>
      </Box>

      {paged.map(sc => (
        <Accordion key={sc.subcategoryId}>
          <AccordionSummary expandIcon={<ExpandMoreIcon />}>
            <Box display="flex" width="100%">
              <Box flex={1}><Typography variant="h6">{sc.subcategoryName}</Typography></Box>
              <Box flex={2}><Typography>{sc.subcategoryDescription}</Typography></Box>
              <Box flex={1}><Typography variant="caption">{sc.relatedSubcategories}</Typography></Box>
            </Box>
          </AccordionSummary>

          <AccordionDetails>
            <Table size="small">
              <TableHead sx={{ backgroundColor: 'black' }}>
                <TableRow>
                  {[
                    'BU','Your Custodian','In Scope?','Justification',
                    'Maturity','Profile','Consuming From BU','Dept','Info','Actions'
                  ].map(h => (
                    <TableCell key={h} sx={{ color: 'white', fontWeight: 'bold' }}>
                      {h}
                    </TableCell>
                  ))}
                </TableRow>
              </TableHead>
              <TableBody>
                {sc.businessUnits.map(bu => (
                  <React.Fragment key={bu.businessUnitAbbr}>
                    <TableRow sx={{ '&:hover': { backgroundColor: 'rgba(0,0,0,0.04)' } }}>
                      <TableCell>{bu.businessUnitAbbr}</TableCell>
                      <TableCell>{bu.subcatOwnerSubcatCustodian}</TableCell>
                      <TableCell>{bu.subcatOwnerIsInScope}</TableCell>
                      <TableCell>{bu.subcatOwnerJustification}</TableCell>
                      <TableCell>{bu.subcatOwnerMaturityProjection}</TableCell>
                      <TableCell>{bu.subcatOwnerProfileType}</TableCell>
                      <TableCell>{bu.subcatOwnerConsumingFromBusinessUnit}</TableCell>
                      <TableCell>{bu.subcatOwnerDepartmentName}</TableCell>
                      <TableCell>
                        <Tooltip title={bu.showAuditor ? 'Hide Auditor Rec' : 'Show Auditor Rec'}>
                          <IconButton
                            size="small"
                            onClick={() => toggleAuditorRec(sc.subcategoryId, bu.businessUnitAbbr)}
                          >
                            Info
                          </IconButton>
                        </Tooltip>
                      </TableCell>
                      <TableCell>
                        <Tooltip title="Accept Recommendations">
                          <IconButton size="small" onClick={() => promptAccept(bu)}>
                            <CheckIcon />
                          </IconButton>
                        </Tooltip>
                        <Tooltip title="Make Changes">
                          <IconButton size="small" onClick={() => openModal(bu)}>
                            <EditIcon />
                          </IconButton>
                        </Tooltip>
                      </TableCell>
                    </TableRow>

                    {bu.showAuditor && (
                      <TableRow>
                        <TableCell colSpan={10} sx={{ backgroundColor: '#f4f4f4', p: 2 }}>
                          <Typography variant="subtitle2" gutterBottom>
                            Auditor Recommendation
                          </Typography>
                          <Box display="grid" gridTemplateColumns="repeat(2,1fr)" gap={2}>
                            <Typography><strong>Custodian:</strong> {bu.auditorSubcatCustodian}</Typography>
                            <Typography><strong>In Scope?</strong> {bu.auditorIsInScope}</Typography>
                            <Typography><strong>Justification:</strong> {bu.auditorJustification}</Typography>
                            <Typography><strong>Maturity:</strong> {bu.auditorMaturityProjection}</Typography>
                            <Typography><strong>Profile:</strong> {bu.auditorProfileType}</Typography>
                            <Typography><strong>Consuming From BU:</strong> {bu.auditorConsumingFromBusinessUnit}</Typography>
                            <Typography><strong>Department:</strong> {bu.auditorDepartmentName}</Typography>
                          </Box>
                        </TableCell>
                      </TableRow>
                    )}
                  </React.Fragment>
                ))}
              </TableBody>
            </Table>
          </AccordionDetails>
        </Accordion>
      ))}

      <TablePagination
        component="div"
        count={data.length}
        page={page}
        onPageChange={handleChangePage}
        rowsPerPage={rowsPerPage}
        onRowsPerPageChange={handleChangeRowsPerPage}
        rowsPerPageOptions={[10,20,50]}
      />

      {currentBU && (
        <CustodianModal
          open={modalOpen}
          onClose={() => setModalOpen(false)}
          data={currentBU}
          onSave={handleSave}
        />
      )}

      <Dialog open={confirmOpen} onClose={() => setConfirmOpen(false)}>
        <DialogTitle>Confirm Accept</DialogTitle>
        <DialogContent>
          Are you sure you want to accept the Auditorâ€™s recommendations?
        </DialogContent>
        <DialogActions>
          <Button onClick={() => setConfirmOpen(false)}>Cancel</Button>
          <Button onClick={confirmAccept} variant="contained">Yes</Button>
        </DialogActions>
      </Dialog>

      {/* Global Snackbar */}
      <Snackbar
        open={snackbar.open}
        autoHideDuration={4000}
        onClose={() => setSnackbar(s => ({ ...s, open: false }))}
      >
        <Alert
          onClose={() => setSnackbar(s => ({ ...s, open: false }))}
          severity={snackbar.severity}
          sx={{ width: '100%' }}
        >
          {snackbar.message}
        </Alert>
      </Snackbar>
    </Box>
  );
};

export default CustodianAccordion;
