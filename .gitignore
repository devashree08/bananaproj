import React, { useState, useEffect, useMemo } from "react";
import axios from "axios";
import MaterialReactTable from "material-react-table";
import {
  Card,
  CardContent,
  Typography,
  FormControl,
  InputLabel,
  Select,
  MenuItem,
  Checkbox,
  ListItemText,
  CircularProgress,
  Alert,
} from "@mui/material";

const ScopeManagement = () => {
  const [data, setData] = useState([]);
  const [selectedSubcategories, setSelectedSubcategories] = useState([]);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState(null);

  useEffect(() => {
    const fetchCSFScopeData = async () => {
      try {
        setLoading(true);
        const response = await axios.get("/api/scope");
        setData(response.data);
      } catch (err) {
        console.error("Error fetching CSF scope data:", err);
        setError("Failed to load data. Please try again.");
      } finally {
        setLoading(false);
      }
    };
    fetchCSFScopeData();
  }, []);

  // Multi-Select Subcategory Filter
  const handleFilterChange = (event) => {
    setSelectedSubcategories(event.target.value.length === 0 ? [] : event.target.value);
  };

  const uniqueSubcategories = useMemo(
    () => [...new Set(data.map((item) => item.subcategoryName))],
    [data]
  );

  if (loading) return <CircularProgress sx={{ display: "block", margin: "auto", mt: 4 }} />;
  if (error) return <Alert severity="error">{error}</Alert>;

  return (
    <div style={{ padding: "20px" }}>
      {/* Subcategory Filter */}
      <FormControl fullWidth margin="normal">
        <InputLabel>Select Subcategories</InputLabel>
        <Select
          multiple
          value={selectedSubcategories}
          onChange={handleFilterChange}
          renderValue={(selected) => (selected.length === 0 ? "All" : selected.join(", "))}
        >
          {uniqueSubcategories.map((subcat) => (
            <MenuItem key={subcat} value={subcat}>
              <Checkbox checked={selectedSubcategories.includes(subcat)} />
              <ListItemText primary={subcat} />
            </MenuItem>
          ))}
        </Select>
      </FormControl>

      {/* Render Subcategory Cards & Table */}
      {Object.entries(
        data.reduce((acc, item) => {
          if (!acc[item.subcategoryId]) acc[item.subcategoryId] = [];
          acc[item.subcategoryId].push(item);
          return acc;
        }, {})
      )
        .filter(([_, items]) =>
          selectedSubcategories.length === 0 || selectedSubcategories.includes(items[0].subcategoryName)
        )
        .map(([subcategoryId, items]) => (
          <SubcategoryCard key={subcategoryId} subcategory={items[0]} businessUnits={items} />
        ))}
    </div>
  );
};

// Component for Subcategory Card & Business Units Table
const SubcategoryCard = ({ subcategory, businessUnits }) => {
  const [tableData, setTableData] = useState(businessUnits);

  const updateTableData = (rowIndex, columnId, value) => {
    setTableData((prev) =>
      prev.map((row, index) => (index === rowIndex ? { ...row, [columnId]: value } : row))
    );
  };

  // Define Table Columns with Dynamic Column Rendering
  const columns = useMemo(
    () => [
      {
        accessorKey: "businessUnitAbbr",
        header: "Business Unit Abbr",
      },
      {
        accessorKey: "businessUnitOwner",
        header: "Business Unit Owner",
        editComponent: ({ row, value, onChange }) => (
          <Select
            multiple
            value={value}
            onChange={(e) => onChange(e.target.value)}
            fullWidth
          >
            {["Owner 1", "Owner 2", "Owner 3"].map((owner) => (
              <MenuItem key={owner} value={owner}>
                {owner}
              </MenuItem>
            ))}
          </Select>
        ),
      },
      {
        accessorKey: "auditorIsInScope",
        header: "Auditor In Scope?",
        editComponent: ({ row, value, onChange }) => (
          <Select value={value} onChange={(e) => onChange(e.target.value)} fullWidth>
            <MenuItem value="Yes">Yes</MenuItem>
            <MenuItem value="No">No</MenuItem>
          </Select>
        ),
      },
      {
        accessorKey: "auditorJustification",
        header: "Auditor Justification",
        enableEditing: (row) => row.original.auditorIsInScope === "No",
      },
      {
        accessorKey: "auditorProfileType",
        header: "Auditor Profile Type",
        editComponent: ({ row, value, onChange }) => (
          <Select value={value} onChange={(e) => onChange(e.target.value)} fullWidth>
            <MenuItem value="Contributor">Contributor</MenuItem>
            <MenuItem value="Both">Both</MenuItem>
            <MenuItem value="Other">Other</MenuItem>
          </Select>
        ),
      },
      {
        accessorKey: "auditorConsumingFromBusinessUnit",
        header: "Consuming From BU",
        enableEditing: (row) =>
          row.original.auditorProfileType === "Contributor" ||
          row.original.auditorProfileType === "Both",
        editComponent: ({ row, value, onChange }) => (
          <Select value={value} onChange={(e) => onChange(e.target.value)} fullWidth>
            {["ABC", "UIO", "POA", "SKA-C"].map((bu) => (
              <MenuItem key={bu} value={bu}>
                {bu}
              </MenuItem>
            ))}
          </Select>
        ),
      },
      {
        accessorKey: "subcatOwnerAcceptRecommendation",
        header: "Owner Accept Recommendation?",
        editComponent: ({ row, value, onChange }) => (
          <Select value={value} onChange={(e) => onChange(e.target.value)} fullWidth>
            <MenuItem value="Yes">Yes</MenuItem>
            <MenuItem value="No">No</MenuItem>
          </Select>
        ),
      },
    ],
    []
  );

  return (
    <Card sx={{ marginBottom: 2 }}>
      <CardContent>
        <Typography variant="h6">{subcategory.subcategoryName}</Typography>
        <Typography variant="body2">{subcategory.subcategoryDescription}</Typography>
        <Typography variant="body2">
          Related: {subcategory.relatedCsf1_1Subcategories}
        </Typography>
        <MaterialReactTable columns={columns} data={tableData} enableEditing onEditingRowSave={updateTableData} />
      </CardContent>
    </Card>
  );
};

export default ScopeManagement;
