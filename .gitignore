import React, { useState } from "react";
import {
  Box,
  TextField,
  MenuItem,
  Button,
  Typography,
  Snackbar,
  Alert,
  Paper,
  Autocomplete,
  Stack,
  Table,
  TableHead,
  TableRow,
  TableCell,
  TableBody,
  IconButton,
} from "@mui/material";
import EditIcon from "@mui/icons-material/Edit";
import DeleteIcon from "@mui/icons-material/Delete";

// Mock Data
const vendors = [
  { name: "Nokia", pcmIds: ["PCM1001", "PCM1005"] },
  { name: "Apple", pcmIds: ["PCM1002"] },
  { name: "Samsung", pcmIds: ["PCM1003", "PCM1006"] },
  { name: "Motorolla", pcmIds: ["PCM1004"] },
];
const existingRiskAreas = {
  "Nokia_PCM1001": ["Mobile App", "SIM Card"],
  "Apple_PCM1002": ["Hardware"],
};
const quarters = ["Q1", "Q2", "Q3", "Q4"];
const emptyMitigation = () => ({ A: "", B: "", C: "", D: "", E: "" });

const ReportForm = () => {
  const [form, setForm] = useState({
    quarter: "",
    vendor: "",
    pcm: "",
    riskArea: "",
    riskInsight: "",
    mitigations: emptyMitigation(),
  });
  const [snackbar, setSnackbar] = useState({
    open: false,
    message: "",
    severity: "success",
  });
  const [riskAreasList, setRiskAreasList] = useState([]);
  const [editIndex, setEditIndex] = useState(null);

  const currentPcmIds =
    vendors.find((v) => v.name === form.vendor)?.pcmIds || [];
  const existingKey = form.vendor && form.pcm ? `${form.vendor}_${form.pcm}` : null;
  const currentExistingRiskAreas = existingRiskAreas[existingKey] || [];

  const handleChange = (e) => {
    const { name, value } = e.target;
    setForm((f) => ({ ...f, [name]: value }));

    if (name === "vendor") {
      setForm((f) => ({
        ...f,
        pcm: "",
        riskArea: "",
        riskInsight: "",
        mitigations: emptyMitigation(),
      }));
    }
    if (name === "pcm") {
      setForm((f) => ({
        ...f,
        riskArea: "",
        riskInsight: "",
        mitigations: emptyMitigation(),
      }));
    }
  };

  const handleRiskAreaChange = (event, value) => {
    setForm((f) => ({
      ...f,
      riskArea: value || "",
    }));
  };

  const handleMitigationChange = (e) => {
    const { name, value } = e.target;
    setForm((f) => ({
      ...f,
      mitigations: { ...f.mitigations, [name]: value },
    }));
  };

  const handleAddRiskArea = () => {
    if (!form.riskArea || !form.riskInsight) {
      setSnackbar({
        open: true,
        message: "Please enter Risk Area and Risk Insight.",
        severity: "error",
      });
      return;
    }
    const entry = {
      riskArea: form.riskArea,
      riskInsight: form.riskInsight,
      mitigations: { ...form.mitigations },
    };
    let updatedList = [...riskAreasList];
    if (editIndex !== null) {
      updatedList[editIndex] = entry;
      setEditIndex(null);
    } else {
      updatedList.push(entry);
    }
    setRiskAreasList(updatedList);
    setForm((f) => ({
      ...f,
      riskArea: "",
      riskInsight: "",
      mitigations: emptyMitigation(),
    }));
  };

  const handleEditRiskArea = (idx) => {
    const entry = riskAreasList[idx];
    setForm((f) => ({
      ...f,
      riskArea: entry.riskArea,
      riskInsight: entry.riskInsight,
      mitigations: { ...entry.mitigations },
    }));
    setEditIndex(idx);
  };

  const handleDeleteRiskArea = (idx) => {
    setRiskAreasList(riskAreasList.filter((_, i) => i !== idx));
    if (editIndex === idx) setEditIndex(null);
  };

  const handleFinalSave = () => {
    if (!form.quarter || !form.vendor || !form.pcm || riskAreasList.length === 0) {
      setSnackbar({
        open: true,
        message:
          "Please select all filters and add at least one Risk Area.",
        severity: "error",
      });
      return;
    }
    // Here, you'd POST to your API
    setTimeout(() => {
      setSnackbar({
        open: true,
        message: "All risk areas saved to database!",
        severity: "success",
      });
      setRiskAreasList([]);
    }, 900);
  };

  return (
    <Paper
      elevation={3}
      sx={{
        p: { xs: 2, sm: 4 },
        width: "100%",
        mx: "auto",
        my: 6,
        borderRadius: 3,
        bgcolor: "#fafcff",
      }}
    >
      <Typography variant="h5" fontWeight={700} gutterBottom>
        New Risk Report
      </Typography>
      {/* Top filters */}
      <Box sx={{ display: "flex", gap: 3, mb: 2, flexWrap: "wrap" }}>
        <TextField
          select
          label="Report Quarter"
          name="quarter"
          value={form.quarter}
          onChange={handleChange}
          required
          sx={{ flex: 1, minWidth: 180 }}
        >
          {quarters.map((q) => (
            <MenuItem key={q} value={q}>
              {q}
            </MenuItem>
          ))}
        </TextField>
        <TextField
          select
          label="Vendor"
          name="vendor"
          value={form.vendor}
          onChange={handleChange}
          required
          sx={{ flex: 1, minWidth: 180 }}
        >
          {vendors.map((v) => (
            <MenuItem key={v.name} value={v.name}>
              {v.name}
            </MenuItem>
          ))}
        </TextField>
        <TextField
          select
          label="PCM ID"
          name="pcm"
          value={form.pcm}
          onChange={handleChange}
          required
          sx={{ flex: 1, minWidth: 180 }}
          disabled={!form.vendor}
        >
          {currentPcmIds.map((id) => (
            <MenuItem key={id} value={id}>
              {id}
            </MenuItem>
          ))}
        </TextField>
      </Box>

      {/* Risk Area in its own row */}
      <Box sx={{ mb: 2 }}>
        <Autocomplete
          freeSolo
          value={form.riskArea}
          onChange={handleRiskAreaChange}
          inputValue={form.riskArea}
          onInputChange={(event, newValue) =>
            setForm((f) => ({ ...f, riskArea: newValue }))
          }
          options={currentExistingRiskAreas}
          sx={{ width: "100%" }}
          renderInput={(params) => (
            <TextField {...params} label="Risk Area" required />
          )}
          disabled={!form.pcm}
        />
      </Box>

      {/* Editing hint */}
      {editIndex !== null && (
        <Typography sx={{ color: "primary.main", mb: 1, ml: 1 }}>
          Editing Risk Area #{editIndex + 1}
        </Typography>
      )}

      {/* Risk Insight */}
      <Box sx={{ mt: 2 }}>
        <Typography variant="subtitle1" fontWeight={600} sx={{ mb: 1 }}>
          Risk Insight
        </Typography>
        <TextField
          name="riskInsight"
          value={form.riskInsight}
          onChange={handleChange}
          multiline
          minRows={5}
          fullWidth
          required
          placeholder="Enter key risk insights here..."
        />
      </Box>

      {/* Risk Mitigation Fields A-E, each in own row */}
      <Box sx={{ mt: 4 }}>
        <Typography variant="subtitle1" fontWeight={600} sx={{ mb: 1 }}>
          Risk Mitigations (Aâ€“E)
        </Typography>
        <Stack spacing={2}>
          {["A", "B", "C", "D", "E"].map((key) => (
            <TextField
              key={key}
              label={`Risk Mitigation ${key}`}
              name={key}
              value={form.mitigations[key]}
              onChange={handleMitigationChange}
              multiline
              minRows={2}
              fullWidth
              required={key === "A"}
              placeholder={`Mitigation ${key}`}
            />
          ))}
        </Stack>
      </Box>

      {/* Add Risk Area Button */}
      <Box sx={{ mt: 3, textAlign: "right" }}>
        <Button
          variant="outlined"
          onClick={handleAddRiskArea}
          sx={{ px: 4, fontWeight: 700 }}
        >
          {editIndex !== null ? "Update Risk Area" : "Add Risk Area"}
        </Button>
      </Box>

      {/* Grid/Table of Temp Risk Areas */}
      {riskAreasList.length > 0 && (
        <Box sx={{ mt: 4 }}>
          <Typography variant="h6" fontWeight={700} gutterBottom>
            Risk Areas for this PCM ID
          </Typography>
          <Paper elevation={2}>
            <Table>
              <TableHead>
                <TableRow>
                  <TableCell sx={{ fontWeight: 700, width: "18%" }}>
                    Risk Area
                  </TableCell>
                  <TableCell sx={{ fontWeight: 700, width: "36%" }}>
                    Risk Insight
                  </TableCell>
                  <TableCell sx={{ fontWeight: 700, width: "36%" }}>
                    Risk Mitigation
                  </TableCell>
                  <TableCell
                    sx={{ fontWeight: 700, width: "10%" }}
                    align="center"
                  >
                    Actions
                  </TableCell>
                </TableRow>
              </TableHead>
              <TableBody>
                {riskAreasList.map((entry, idx) => (
                  <TableRow key={idx} hover>
                    <TableCell>
                      <Typography fontWeight={600}>
                        {entry.riskArea}
                      </Typography>
                    </TableCell>
                    <TableCell>
                      <Typography variant="body2">
                        {entry.riskInsight}
                      </Typography>
                    </TableCell>
                    <TableCell>
                      <Box sx={{ pl: 1 }}>
                        {["A", "B", "C", "D", "E"].map((key, mIdx) =>
                          entry.mitigations[key] ? (
                            <Typography
                              variant="body2"
                              sx={{ mb: 0.5 }}
                              key={key}
                            >
                              <b>
                                {idx + 1}
                                {String.fromCharCode(97 + mIdx)}.
                              </b>{" "}
                              {entry.mitigations[key]}
                            </Typography>
                          ) : null
                        )}
                      </Box>
                    </TableCell>
                    <TableCell align="center">
                      <IconButton
                        onClick={() => handleEditRiskArea(idx)}
                        size="small"
                      >
                        <EditIcon />
                      </IconButton>
                      <IconButton
                        onClick={() => handleDeleteRiskArea(idx)}
                        size="small"
                      >
                        <DeleteIcon />
                      </IconButton>
                    </TableCell>
                  </TableRow>
                ))}
              </TableBody>
            </Table>
          </Paper>
        </Box>
      )}

      {/* Final Save Button */}
      <Box sx={{ mt: 4, textAlign: "center" }}>
        <Button
          variant="contained"
          size="large"
          sx={{ px: 6, py: 1.5, fontWeight: 700 }}
          onClick={handleFinalSave}
        >
          Save All to Database
        </Button>
      </Box>

      {/* Snackbar Toaster */}
      <Snackbar
        open={snackbar.open}
        autoHideDuration={2800}
        onClose={() => setSnackbar({ ...snackbar, open: false })}
        anchorOrigin={{ vertical: "bottom", horizontal: "center" }}
      >
        <Alert
          severity={snackbar.severity}
          onClose={() => setSnackbar({ ...snackbar, open: false })}
          variant="filled"
          sx={{ width: "100%" }}
        >
          {snackbar.message}
        </Alert>
      </Snackbar>
    </Paper>
  );
};

export default ReportForm;
