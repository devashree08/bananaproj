import React, { useState, useEffect, useMemo, useCallback } from "react";
import axios from "axios";
import { DataGrid } from "@mui/x-data-grid";
import {
  FormControl,
  MenuItem,
  Select,
  Checkbox,
  FormControlLabel,
  TextField,
  IconButton,
} from "@mui/material";
import { ExpandMore, ChevronRight } from "@mui/icons-material";

// Secure API Fetch Function with Axios
const fetchCSFScopeData = async () => {
  try {
    const response = await axios.get("/api/v1/GetCSFScopeData", {
      headers: { "Content-Type": "application/json" },
    });
    return response.data;
  } catch (error) {
    console.error("Error fetching CSF Scope data:", error);
    return [];
  }
};

const CSFScopeTable = () => {
  const [tableData, setTableData] = useState([]);
  const [expandedRows, setExpandedRows] = useState({}); // Track expanded/collapsed rows
  const [loading, setLoading] = useState(true);

  // Fetch data securely using Axios
  useEffect(() => {
    let isMounted = true;
    fetchCSFScopeData().then((data) => {
      if (isMounted) {
        setTableData(formatTableData(data));
        setLoading(false);
      }
    });
    return () => (isMounted = false); // Prevent memory leaks
  }, []);

  // Convert .NET Core's JSON keys (lowercase) to React-friendly camelCase
  const normalizeApiData = useMemo(
    () => (data) =>
      data.map((item) => ({
        subcategoryId: item.subcategoryId,
        subcategoryName: item.subcategoryName,
        subcategoryDescription: item.subcategoryDescription,
        relatedCsf1_1Subcategories: item.relatedCsf1_1Subcategories,
        businessUnitName: item.businessUnitName,
        businessUnitAbbreviation: item.businessUnitAbbreviation,
        auditorIsInScope: item.auditorIsInScope,
        auditorJustification: item.auditorJustification,
        auditorProfileType: item.auditorProfileType,
        auditorConsumingFromBusinessUnit: item.auditorConsumingFromBusinessUnit,
        subcatOwnerAcceptRecommendation: item.subcatOwnerAcceptRecommendation,
        subcatOwnerIsInScope: item.subcatOwnerIsInScope,
        subcatOwnerJustification: item.subcatOwnerJustification,
        subcatOwnerProfileType: item.subcatOwnerProfileType,
        subcatOwnerConsumingFromBusinessUnit: item.subcatOwnerConsumingFromBusinessUnit,
      })),
    []
  );

  // Memoized Data Processing (Prevents Unnecessary Recomputations)
  const formatTableData = useMemo(() => (data) => {
    const normalizedData = normalizeApiData(data);
    const groupedData = [];

    normalizedData.forEach((item) => {
      const subcategoryRow = groupedData.find((row) => row.id === `subcat-${item.subcategoryId}`);

      if (!subcategoryRow) {
        groupedData.push({
          id: `subcat-${item.subcategoryId}`,
          subcategoryId: item.subcategoryId,
          subcategoryName: item.subcategoryName,
          subcategoryDescription: item.subcategoryDescription,
          relatedCsf1_1Subcategories: item.relatedCsf1_1Subcategories,
          isGroup: true, // Flag for subcategory row
        });
      }

      groupedData.push({
        id: `bu-${item.subcategoryId}-${item.businessUnitAbbreviation}`,
        parentId: `subcat-${item.subcategoryId}`, // Links to parent
        businessUnitName: item.businessUnitName,
        businessUnitAbbreviation: item.businessUnitAbbreviation,
        auditorIsInScope: item.auditorIsInScope,
        auditorJustification: item.auditorJustification,
        auditorProfileType: item.auditorProfileType,
        auditorConsumingFromBusinessUnit: item.auditorConsumingFromBusinessUnit,
        subcatOwnerAcceptRecommendation: item.subcatOwnerAcceptRecommendation,
        subcatOwnerIsInScope: item.subcatOwnerIsInScope,
        subcatOwnerJustification: item.subcatOwnerJustification,
        subcatOwnerProfileType: item.subcatOwnerProfileType,
        subcatOwnerConsumingFromBusinessUnit: item.subcatOwnerConsumingFromBusinessUnit,
      });
    });

    return groupedData;
  }, [normalizeApiData]);

  // Memoized Expand/Collapse Toggle Function
  const toggleRowExpansion = useCallback((subcatId) => {
    setExpandedRows((prev) => ({
      ...prev,
      [subcatId]: !prev[subcatId],
    }));
  }, []);

  // Column Definitions (Memoized for Performance)
  const columns = useMemo(
    () => [
      {
        field: "subcategoryName",
        headerName: "CSF 2 Subcategory",
        width: 300,
        renderCell: (params) => {
          if (params.row.isGroup) {
            return (
              <div style={{ fontWeight: "bold", display: "flex", alignItems: "center" }}>
                <IconButton size="small" onClick={() => toggleRowExpansion(params.row.id)}>
                  {expandedRows[params.row.id] ? <ExpandMore /> : <ChevronRight />}
                </IconButton>
                {params.value}
              </div>
            );
          }
          return null;
        },
      },
      {
        field: "businessUnitName",
        headerName: "Business Unit",
        width: 200,
        renderCell: (params) => (!params.row.isGroup ? params.value : null),
      },

      // Auditor Fields
      {
        field: "auditorIsInScope",
        headerName: "Auditor - In Scope?",
        width: 150,
        renderCell: (params) =>
          !params.row.isGroup ? <Checkbox checked={params.value} onChange={() => {}} /> : null,
      },
      { field: "auditorJustification", headerName: "Auditor - Justification", width: 250 },
      {
        field: "auditorProfileType",
        headerName: "Auditor - Profile Type",
        width: 200,
        renderCell: (params) =>
          !params.row.isGroup ? (
            <FormControl variant="standard" fullWidth>
              <Select defaultValue={params.value} onChange={() => {}}>
                <MenuItem value="Provider">Provider</MenuItem>
                <MenuItem value="Consumer">Consumer</MenuItem>
                <MenuItem value="Inheritor">Inheritor</MenuItem>
                <MenuItem value="Both">Both</MenuItem>
              </Select>
            </FormControl>
          ) : null,
      },

      // Subcategory Owner Fields
      {
        field: "subcatOwnerAcceptRecommendation",
        headerName: "Owner - Accept Recommendation?",
        width: 180,
        renderCell: (params) =>
          !params.row.isGroup ? (
            <FormControlLabel
              control={<Checkbox checked={params.value} onChange={() => {}} />}
              label=""
            />
          ) : null,
      },
      { field: "subcatOwnerJustification", headerName: "Owner - Justification", width: 250 },
    ],
    [expandedRows, toggleRowExpansion]
  );

  return (
    <div style={{ height: 600, width: "100%" }}>
      <h2>CSF Scope Data</h2>
      {loading ? (
        <p>Loading data...</p>
      ) : (
        <DataGrid
          rows={tableData.filter(
            (row) => row.isGroup || expandedRows[row.parentId] || row.parentId === undefined
          )}
          columns={columns}
          getRowId={(row) => row.id}
          pageSize={10}
          disableSelectionOnClick
        />
      )}
    </div>
  );
};

export default CSFScopeTable;
