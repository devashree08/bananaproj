import React, { useEffect, useState, useCallback } from 'react';
import { 
  Dialog, DialogTitle, DialogContent, DialogActions, 
  TextField, MenuItem, Button, Box, Typography, Collapse, Snackbar, Alert 
} from '@mui/material';
import axios from 'axios';
import WorkerSearchModal from './WorkerSearchModal';

/**
 * EditBusinessUnitModal
 * - Displays an edit form for one Business Unit.
 * - BU Owner and Auditor Custodian fields are read-only and updated only via the WorkerSearchModal.
 * - Conditional logic is applied: 
 *   - If auditorIsInScope is 'No', Justification is enabled and required, and other fields are cleared.
 *   - If auditorIsInScope is 'Yes', Justification is cleared/disabled, and maturityProjection, auditorProfileType, and departmentName are enabled.
 *   - If auditorProfileType is 'Consumer' or 'Both', auditorConsumingFromBusinessUnit is enabled.
 * - On Save, calls the /UpdateBUScopeData API and shows a success/error Snackbar.
 * - The form state is reset each time the modal opens, so unsaved data is discarded if Cancel is clicked.
 * - The header indicates which Subcategory and BU are being edited.
 */
const EditBusinessUnitModal = ({ open, onClose, businessUnit, onSave }) => {
  const [form, setForm] = useState({ ...businessUnit });
  const [snackbar, setSnackbar] = useState({ open: false, message: '', severity: 'error' });
  const [workerModalOpen, setWorkerModalOpen] = useState(false);
  const [editingField, setEditingField] = useState('');

  // Reset the form each time the modal opens.
  useEffect(() => {
    if (open) {
      setForm({ ...businessUnit });
    }
  }, [open, businessUnit]);

  const handleFieldChange = useCallback((field, value) => {
    setForm(prev => ({ ...prev, [field]: value }));
  }, []);

  const openWorkerModal = useCallback((field) => {
    setEditingField(field);
    setWorkerModalOpen(true);
  }, []);

  const handleWorkerSelect = useCallback((value) => {
    handleFieldChange(editingField, value);
  }, [editingField, handleFieldChange]);

  const handleSave = async () => {
    // If auditorIsInScope is changed to 'Yes', clear justification.
    if (form.auditorIsInScope === 'Yes') {
      handleFieldChange('auditorJustification', '');
    }
    // If auditorIsInScope is 'No', clear fields not applicable.
    if (form.auditorIsInScope === 'No') {
      handleFieldChange('maturityProjection', '');
      handleFieldChange('auditorProfileType', '');
      handleFieldChange('auditorConsumingFromBusinessUnit', '');
      handleFieldChange('departmentName', '');
    }
    // Validate: if auditorIsInScope is 'No', justification must be provided.
    if (form.auditorIsInScope === 'No' && !form.auditorJustification) {
      setSnackbar({ open: true, message: 'Auditor Justification is required when In Scope is No.', severity: 'error' });
      return;
    }

    // Build payload using businessUnitAbbr and subcategoryName as keys.
    const payload = {
      businessUnitAbbr: form.businessUnitAbbr,
      subcategoryName: form.subcategoryName,
      businessUnitOwner: form.businessUnitOwner,
      auditorSubcatCustodian: form.auditorSubcatCustodian,
      auditorIsInScope: form.auditorIsInScope,
      auditorJustification: form.auditorJustification,
      maturityProjection: form.maturityProjection,
      auditorProfileType: form.auditorProfileType,
      auditorConsumingFromBusinessUnit: form.auditorConsumingFromBusinessUnit,
      departmentName: form.departmentName
    };

    try {
      await axios.post('/UpdateBUScopeData', payload);
      setSnackbar({ open: true, message: 'Update successful.', severity: 'success' });
      onSave(form);
      onClose();
    } catch (error) {
      setSnackbar({ open: true, message: 'Error saving data. Please try again.', severity: 'error' });
      console.error('Error updating BUScopeData:', error);
    }
  };

  // Conditional enabling/disabling:
  const justificationDisabled = form.auditorIsInScope === 'Yes';
  const maturityEnabled = form.auditorIsInScope === 'Yes';
  const profileEnabled = form.auditorIsInScope === 'Yes';
  const departmentEnabled = form.auditorIsInScope === 'Yes';
  const consumingEnabled = form.auditorProfileType === 'Consumer' || form.auditorProfileType === 'Both';

  return (
    <>
      <Dialog open={open} onClose={onClose} fullWidth maxWidth="sm">
        <DialogTitle>
          Edit Business Unit - {form.businessUnitAbbr} in {form.subcategoryName}
        </DialogTitle>
        <DialogContent>
          <TextField
            label="BU (Read Only)"
            value={form.businessUnitAbbr}
            fullWidth
            margin="normal"
            disabled
          />
          <Box display="flex" alignItems="center" mb={2}>
            <TextField
              label="BU Owner"
              value={form.businessUnitOwner}
              fullWidth
              margin="normal"
              InputProps={{ readOnly: true }}
            />
            <Button onClick={() => openWorkerModal('businessUnitOwner')} variant="outlined" sx={{ ml: 1 }}>
              Edit
            </Button>
          </Box>
          <Box display="flex" alignItems="center" mb={2}>
            <TextField
              label="Auditor Custodian"
              value={form.auditorSubcatCustodian}
              fullWidth
              margin="normal"
              InputProps={{ readOnly: true }}
            />
            <Button onClick={() => openWorkerModal('auditorSubcatCustodian')} variant="outlined" sx={{ ml: 1 }}>
              Edit
            </Button>
          </Box>
          <TextField
            label="In Scope?"
            value={form.auditorIsInScope}
            onChange={e => handleFieldChange('auditorIsInScope', e.target.value)}
            select
            fullWidth
            margin="normal"
          >
            <MenuItem value="Yes">Yes</MenuItem>
            <MenuItem value="No">No</MenuItem>
          </TextField>
          <TextField
            label="Justification"
            value={form.auditorJustification}
            onChange={e => handleFieldChange('auditorJustification', e.target.value)}
            fullWidth
            margin="normal"
            disabled={justificationDisabled}
          />
          <TextField
            label="Maturity Projection"
            value={form.maturityProjection}
            onChange={e => handleFieldChange('maturityProjection', e.target.value)}
            select
            fullWidth
            margin="normal"
            disabled={!maturityEnabled}
          >
            {["Increase", "Decrease", "Maintain"].map(option => (
              <MenuItem key={option} value={option}>{option}</MenuItem>
            ))}
          </TextField>
          <TextField
            label="Profile Type"
            value={form.auditorProfileType}
            onChange={e => handleFieldChange('auditorProfileType', e.target.value)}
            select
            fullWidth
            margin="normal"
            disabled={!profileEnabled}
          >
            {["Provider", "Consumer", "Both", "Inheritor"].map(option => (
              <MenuItem key={option} value={option}>{option}</MenuItem>
            ))}
          </TextField>
          <Collapse in={true} timeout="auto" unmountOnExit>
            <Box sx={{ p: 1, backgroundColor: '#f4f4f4', borderRadius: 1, mt: 1 }}>
              <Typography variant="h6">Profile Type Definitions</Typography>
              <ul style={{ margin: 0, paddingLeft: 16 }}>
                <li><strong>Provider:</strong> Supplies services to other BUs.</li>
                <li><strong>Consumer:</strong> Receives services from other BUs.</li>
                <li><strong>Both:</strong> Acts as both Provider & Consumer.</li>
                <li><strong>Inheritor:</strong> Inherits control from another BU.</li>
              </ul>
            </Box>
          </Collapse>
          <TextField
            label="Department Name"
            value={form.departmentName}
            onChange={e => handleFieldChange('departmentName', e.target.value)}
            fullWidth
            margin="normal"
            disabled={!departmentEnabled}
          />
          <TextField
            label="Consuming From BU"
            value={form.auditorConsumingFromBusinessUnit}
            onChange={e => handleFieldChange('auditorConsumingFromBusinessUnit', e.target.value)}
            select
            fullWidth
            margin="normal"
            disabled={!consumingEnabled}
          >
            {["ABC", "UIO", "POA", "SKA-C", "Other"].map(option => (
              <MenuItem key={option} value={option}>{option}</MenuItem>
            ))}
          </TextField>
        </DialogContent>
        <DialogActions>
          <Button onClick={onClose}>Cancel</Button>
          <Button onClick={handleSave} variant="contained">Save</Button>
        </DialogActions>
      </Dialog>
      {workerModalOpen && (
        <WorkerSearchModal 
          open={workerModalOpen} 
          onClose={() => setWorkerModalOpen(false)}
          onSelect={handleWorkerSelect}
          initialValue={form[editingField]}
        />
      )}
      <Snackbar
        open={snackbar.open}
        autoHideDuration={4000}
        onClose={() => setSnackbar(prev => ({ ...prev, open: false }))}
      >
        <Alert onClose={() => setSnackbar(prev => ({ ...prev, open: false }))} severity={snackbar.severity}>
          {snackbar.message}
        </Alert>
      </Snackbar>
    </>
  );
};

export default EditBusinessUnitModal;
