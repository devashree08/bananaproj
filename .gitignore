import React, { useEffect, useState } from 'react';
import {
  Accordion,
  AccordionSummary,
  AccordionDetails,
  Typography,
  Table,
  TableHead,
  TableBody,
  TableRow,
  TableCell,
  Button,
  Dialog,
  DialogTitle,
  DialogContent,
  DialogActions,
  TextField,
  MenuItem,
  Box,
  Snackbar,
  Alert,
  Collapse,
  IconButton
} from '@mui/material';
import ExpandMoreIcon from '@mui/icons-material/ExpandMore';
import InfoIcon from '@mui/icons-material/Info';
import axios from 'axios';

// ---------------- WorkerSearchModal ----------------
// Modal for searching workers. Users enter First and Last name,
// click Search (which calls the API), then select multiple workers.
// On Done, the selected names (commaâ€‘separated) are returned.
const WorkerSearchModal = ({ open, onClose, onSelect, initialValue }) => {
  const [firstName, setFirstName] = useState('');
  const [lastName, setLastName] = useState('');
  const [loading, setLoading] = useState(false);
  const [results, setResults] = useState([]);
  const [selected, setSelected] = useState(initialValue ? initialValue.split(', ') : []);
  const [snackbar, setSnackbar] = useState({ open: false, message: '', severity: 'error' });

  const searchWorkers = async () => {
    if (!firstName.trim() || !lastName.trim()) {
      setSnackbar({ open: true, message: 'Please enter both first and last names.', severity: 'error' });
      return;
    }
    setLoading(true);
    try {
      const response = await axios.get('/api/GetWorkerName', {
        params: { FirstName: firstName.trim(), LastName: lastName.trim() }
      });
      if (response.data.length === 0) {
        setSnackbar({ open: true, message: 'No workers found.', severity: 'error' });
      }
      setResults(response.data);
    } catch (error) {
      setSnackbar({ open: true, message: 'Error fetching workers.', severity: 'error' });
      setResults([]);
    } finally {
      setLoading(false);
    }
  };

  const toggleSelect = (nameFull) => {
    if (selected.includes(nameFull)) {
      setSelected(selected.filter(n => n !== nameFull));
    } else {
      setSelected([...selected, nameFull]);
    }
  };

  const handleDone = () => {
    onSelect(selected.join(', '));
    onClose();
  };

  return (
    <Dialog open={open} onClose={onClose} fullWidth maxWidth="sm">
      <DialogTitle>Search Worker</DialogTitle>
      <DialogContent>
        <TextField 
          label="First Name" 
          value={firstName} 
          onChange={e => setFirstName(e.target.value)} 
          fullWidth 
          margin="normal" 
        />
        <TextField 
          label="Last Name" 
          value={lastName} 
          onChange={e => setLastName(e.target.value)} 
          fullWidth 
          margin="normal" 
        />
        <Button onClick={searchWorkers} variant="contained" disabled={loading}>
          {loading ? 'Searching...' : 'Search'}
        </Button>
        {results.length > 0 && (
          <Box mt={2}>
            <Typography variant="subtitle1">Select Worker(s):</Typography>
            {results.map(worker => (
              <Box 
                key={worker.NameFull} 
                display="flex" 
                alignItems="center" 
                onClick={() => toggleSelect(worker.NameFull)}
                sx={{ cursor: 'pointer', py: 0.5 }}
              >
                <input type="checkbox" checked={selected.includes(worker.NameFull)} readOnly style={{ marginRight: 8 }} />
                <Typography>
                  {worker.NameFull} - {worker.JobTitle} (Supervisor: {worker.SupervisorFullName})
                </Typography>
              </Box>
            ))}
          </Box>
        )}
      </DialogContent>
      <DialogActions>
        <Button onClick={onClose}>Cancel</Button>
        <Button onClick={handleDone} variant="contained">Done</Button>
      </DialogActions>
      <Snackbar
        open={snackbar.open}
        autoHideDuration={4000}
        onClose={() => setSnackbar({ ...snackbar, open: false })}
      >
        <Alert onClose={() => setSnackbar({ ...snackbar, open: false })} severity={snackbar.severity}>
          {snackbar.message}
        </Alert>
      </Snackbar>
    </Dialog>
  );
};

// ---------------- EditBusinessUnitModal ----------------
// Modal form to edit a single Business Unit row.
// It shows all editable fields and uses WorkerSearchModal for BU Owner and Auditor Custodian.
const EditBusinessUnitModal = ({ open, onClose, businessUnit, onSave }) => {
  const [form, setForm] = useState({ ...businessUnit });
  const [workerModalOpen, setWorkerModalOpen] = useState(false);
  const [editingField, setEditingField] = useState('');

  useEffect(() => {
    setForm({ ...businessUnit });
  }, [businessUnit]);

  const handleFieldChange = (field, value) => {
    setForm(prev => ({ ...prev, [field]: value }));
  };

  const openWorkerModal = (field) => {
    setEditingField(field);
    setWorkerModalOpen(true);
  };

  const handleWorkerSelect = (value) => {
    handleFieldChange(editingField, value);
  };

  const handleSave = () => {
    onSave(form);
    onClose();
  };

  // Level 3 info panel: For profile type definitions.
  const profileDefinitions = {
    Provider: "Supplies services to other BUs.",
    Consumer: "Receives services from other BUs.",
    Both: "Acts as both Provider and Consumer.",
    Inheritor: "Inherits control from another BU."
  };

  return (
    <>
      <Dialog open={open} onClose={onClose} fullWidth maxWidth="sm">
        <DialogTitle>Edit Business Unit</DialogTitle>
        <DialogContent>
          <TextField
            label="BU (Read Only)"
            value={form.businessUnitAbbr}
            fullWidth
            margin="normal"
            disabled
          />
          <Box display="flex" alignItems="center" mb={2}>
            <TextField
              label="BU Owner"
              value={form.businessUnitOwner}
              fullWidth
              margin="normal"
              disabled
            />
            <Button onClick={() => openWorkerModal('businessUnitOwner')} variant="outlined" sx={{ ml: 1 }}>
              Edit
            </Button>
          </Box>
          <Box display="flex" alignItems="center" mb={2}>
            <TextField
              label="Auditor Custodian"
              value={form.auditorSubcatCustodian}
              fullWidth
              margin="normal"
              disabled
            />
            <Button onClick={() => openWorkerModal('auditorSubcatCustodian')} variant="outlined" sx={{ ml: 1 }}>
              Edit
            </Button>
          </Box>
          <TextField
            label="In Scope?"
            value={form.auditorIsInScope}
            onChange={e => handleFieldChange('auditorIsInScope', e.target.value)}
            select
            fullWidth
            margin="normal"
          >
            <MenuItem value="Yes">Yes</MenuItem>
            <MenuItem value="No">No</MenuItem>
          </TextField>
          <TextField
            label="Justification"
            value={form.auditorJustification}
            onChange={e => handleFieldChange('auditorJustification', e.target.value)}
            fullWidth
            margin="normal"
            disabled={form.auditorIsInScope === 'Yes'}
          />
          <TextField
            label="Maturity Projection"
            value={form.maturityProjection}
            onChange={e => handleFieldChange('maturityProjection', e.target.value)}
            select
            fullWidth
            margin="normal"
          >
            {["Increase", "Decrease", "Maintain"].map(option => (
              <MenuItem key={option} value={option}>{option}</MenuItem>
            ))}
          </TextField>
          <TextField
            label="Profile Type"
            value={form.auditorProfileType}
            onChange={e => handleFieldChange('auditorProfileType', e.target.value)}
            select
            fullWidth
            margin="normal"
          >
            {["Provider", "Consumer", "Both", "Inheritor"].map(option => (
              <MenuItem key={option} value={option}>{option}</MenuItem>
            ))}
          </TextField>
          <Collapse in={!!form.auditorProfileType} timeout="auto" unmountOnExit>
            <Box sx={{ p: 1, backgroundColor: '#f4f4f4', borderRadius: 1, mt: 1 }}>
              <Typography variant="subtitle2">Profile Type Definitions:</Typography>
              <Typography variant="body2">
                {profileDefinitions[form.auditorProfileType] || 'No definition available.'}
              </Typography>
            </Box>
          </Collapse>
          <TextField
            label="Consuming From BU"
            value={form.auditorConsumingFromBusinessUnit}
            onChange={e => handleFieldChange('auditorConsumingFromBusinessUnit', e.target.value)}
            select
            fullWidth
            margin="normal"
          >
            {["ABC", "UIO", "POA", "SKA-C", "Other"].map(option => (
              <MenuItem key={option} value={option}>{option}</MenuItem>
            ))}
          </TextField>
          <TextField
            label="Department Name"
            value={form.departmentName}
            onChange={e => handleFieldChange('departmentName', e.target.value)}
            fullWidth
            margin="normal"
          />
        </DialogContent>
        <DialogActions>
          <Button onClick={onClose}>Cancel</Button>
          <Button onClick={handleSave} variant="contained">Save</Button>
        </DialogActions>
      </Dialog>
      <WorkerSearchModal 
        open={workerModalOpen} 
        onClose={() => setWorkerModalOpen(false)}
        onSelect={handleWorkerSelect}
        initialValue={form[editingField]}
      />
    </>
  );
};

// ---------------- CSFScopeAccordion ----------------
// Main component using MUI Accordions for Level 1.
// Each Accordion displays one subcategory and its details.
// Inside, a Table shows the Business Units (Level 2) with an "Edit" button for each row.
// A simple pagination is implemented if there are more than 5 BU rows.
const CSFScopeAccordion = () => {
  const [data, setData] = useState([]);
  const [currentPage, setCurrentPage] = useState({}); // { subcatId: page }
  const [editBU, setEditBU] = useState(null);
  const [editModalOpen, setEditModalOpen] = useState(false);

  // Fetch ScopeData and group by subcategoryId (Level 1)
  useEffect(() => {
    const fetchData = async () => {
      try {
        const response = await axios.get('/api/ScopeData');
        const grouped = {};
        response.data.forEach(item => {
          const subcatId = item.subcategoryId;
          if (!grouped[subcatId]) {
            grouped[subcatId] = {
              subcategoryId: subcatId,
              subcategoryName: item.subcategoryName,
              subcategoryDescription: item.subcategoryDescription,
              relatedSubcategories: item.relatedCsf1_1Subcategories,
              businessUnits: []
            };
          }
          // Deduplicate based on businessUnitAbbr so we only get one instance per BU.
          if (!grouped[subcatId].businessUnits.find(bu => bu.businessUnitAbbr === item.businessUnitAbbr)) {
            grouped[subcatId].businessUnits.push(item);
          }
        });
        setData(Object.values(grouped));
      } catch (error) {
        console.error('Error fetching scope data:', error);
      }
    };
    fetchData();
  }, []);

  const rowsPerPage = 5;

  const handleEditBU = (bu) => {
    setEditBU(bu);
    setEditModalOpen(true);
  };

  const handleSaveBU = (newData) => {
    // Update the BU in the grouped data.
    setData(prev => prev.map(subcat => ({
      ...subcat,
      businessUnits: subcat.businessUnits.map(bu =>
        bu.id === newData.id ? newData : bu
      )
    })));
    setEditModalOpen(false);
  };

  return (
    <Box sx={{ m: 2 }}>
      {data.map(subcat => {
        // Initialize pagination for this subcategory if not already set.
        if (!currentPage[subcat.subcategoryId]) {
          currentPage[subcat.subcategoryId] = 1;
        }
        // Calculate pagination.
        const startIndex = (currentPage[subcat.subcategoryId] - 1) * rowsPerPage;
        const paginatedBUS = subcat.businessUnits.slice(startIndex, startIndex + rowsPerPage);
        const totalPages = Math.ceil(subcat.businessUnits.length / rowsPerPage);

        return (
          <Accordion key={subcat.subcategoryId}>
            <AccordionSummary expandIcon={<ExpandMoreIcon />}>
              <Box>
                <Typography variant="h6">{subcat.subcategoryName}</Typography>
                <Typography variant="body2">{subcat.subcategoryDescription}</Typography>
                <Typography variant="caption">Related: {subcat.relatedSubcategories}</Typography>
              </Box>
            </AccordionSummary>
            <AccordionDetails>
              <Table size="small">
                <TableHead>
                  <TableRow>
                    <TableCell>BU</TableCell>
                    <TableCell>BU Owner</TableCell>
                    <TableCell>Auditor Custodian</TableCell>
                    <TableCell>In Scope?</TableCell>
                    <TableCell>Justification</TableCell>
                    <TableCell>Maturity Projection</TableCell>
                    <TableCell>Profile Type</TableCell>
                    <TableCell>Consuming From BU</TableCell>
                    <TableCell>Department</TableCell>
                    <TableCell>Info</TableCell>
                    <TableCell>Actions</TableCell>
                  </TableRow>
                </TableHead>
                <TableBody>
                  {paginatedBUS.map(bu => (
                    <React.Fragment key={bu.id}>
                      <TableRow>
                        <TableCell>{bu.businessUnitAbbr}</TableCell>
                        <TableCell>{bu.businessUnitOwner}</TableCell>
                        <TableCell>{bu.auditorSubcatCustodian}</TableCell>
                        <TableCell>{bu.auditorIsInScope}</TableCell>
                        <TableCell>{bu.auditorJustification}</TableCell>
                        <TableCell>{bu.maturityProjection}</TableCell>
                        <TableCell>{bu.auditorProfileType}</TableCell>
                        <TableCell>{bu.auditorConsumingFromBusinessUnit}</TableCell>
                        <TableCell>{bu.departmentName}</TableCell>
                        <TableCell>
                          {/* Level 3 Info: Toggle button to show profile definitions */}
                          <Button variant="text" size="small" onClick={() => bu.showInfo = !bu.showInfo}>
                            {bu.showInfo ? "Hide Info" : "Show Info"}
                          </Button>
                        </TableCell>
                        <TableCell>
                          <Button onClick={() => handleEditBU(bu)} variant="outlined" size="small">
                            Edit
                          </Button>
                        </TableCell>
                      </TableRow>
                      {bu.showInfo && (
                        <TableRow>
                          <TableCell colSpan={11} style={{ backgroundColor: '#f4f4f4' }}>
                            <Typography variant="body2">
                              {bu.auditorProfileType ? 
                                `${bu.auditorProfileType}: ${bu.auditorProfileType === "Provider" ? "Supplies services to other BUs." : bu.auditorProfileType === "Consumer" ? "Receives services from other BUs." : bu.auditorProfileType === "Both" ? "Acts as both Provider & Consumer." : "Inherits control from another BU."}` 
                                : "No Profile Type selected."}
                            </Typography>
                          </TableCell>
                        </TableRow>
                      )}
                    </React.Fragment>
                  ))}
                </TableBody>
              </Table>
              {/* Simple pagination controls */}
              <Box display="flex" justifyContent="center" mt={2}>
                <Button 
                  onClick={() => setCurrentPage(prev => ({ ...prev, [subcat.subcategoryId]: Math.max(1, currentPage[subcat.subcategoryId] - 1) }))}
                  disabled={currentPage[subcat.subcategoryId] === 1}
                >
                  Prev
                </Button>
                <Typography variant="body2" sx={{ mx: 2 }}>
                  Page {currentPage[subcat.subcategoryId]} of {totalPages}
                </Typography>
                <Button 
                  onClick={() => setCurrentPage(prev => ({ ...prev, [subcat.subcategoryId]: Math.min(totalPages, currentPage[subcat.subcategoryId] + 1) }))}
                  disabled={currentPage[subcat.subcategoryId] === totalPages}
                >
                  Next
                </Button>
              </Box>
            </AccordionDetails>
          </Accordion>
        );
      })}
      {/* Edit Business Unit Modal (Level 2 editing) */}
      {editBU && (
        <EditBusinessUnitModal 
          open={editModalOpen}
          onClose={() => setEditModalOpen(false)}
          businessUnit={editBU}
          onSave={handleSaveBU}
        />
      )}
    </Box>
  );
};

export default CSFScopeAccordion;
