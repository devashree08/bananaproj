import React, { useEffect, useState, useMemo } from "react";
import MaterialReactTable from "material-react-table";
import { MenuItem, TextField, Autocomplete, Box, Typography } from "@mui/material";
import axios from "axios";

// Profile Type & Business Unit Options
const ProfileTypeOptions = ["Provider", "Consumer", "Both", "Inheritor"];
const BusinessUnitOptions = ["ABC", "UIO", "POA", "SKA-C"];

// Fetch Worker Names from API
const fetchWorkerNames = async (inputValue) => {
  try {
    const response = await axios.get(`/api/GetWorkerName?search=${inputValue}`);
    return response.data || [];
  } catch (error) {
    console.error("Error fetching worker names:", error);
    return [];
  }
};

const CSFScopeTable = () => {
  const [tableData, setTableData] = useState([]);

  // Fetch Data from API
  useEffect(() => {
    const fetchData = async () => {
      try {
        const response = await axios.get("/api/ScopeData");
        // Group data by subcategory
        const groupedData = Object.values(
          response.data.reduce((acc, item) => {
            if (!acc[item.subcategoryId]) {
              acc[item.subcategoryId] = {
                subcategoryId: item.subcategoryId,
                subcategoryName: item.subcategoryName,
                subcategoryDescription: item.subcategoryDescription,
                relatedSubcategories: item.relatedCsf1_1Subcategories,
                businessUnits: [],
              };
            }
            acc[item.subcategoryId].businessUnits.push(item);
            return acc;
          }, {})
        );
        setTableData(groupedData);
      } catch (error) {
        console.error("Error fetching scope data:", error);
      }
    };
    fetchData();
  }, []);

  // Handle Save Edits
  const handleSaveCell = (cell, value) => {
    setTableData((prevData) =>
      prevData.map((subcategory) => ({
        ...subcategory,
        businessUnits: subcategory.businessUnits.map((bu) =>
          bu.businessUnitAbbr === cell.row.original.businessUnitAbbr
            ? { ...bu, [cell.column.id]: value }
            : bu
        ),
      }))
    );
  };

  // **Layer 1: Subcategory Level**
  const SubcategoryColumns = useMemo(() => [
    { accessorKey: "subcategoryName", header: "Subcategory Name" },
    { accessorKey: "subcategoryDescription", header: "Subcategory Description" },
    { accessorKey: "relatedSubcategories", header: "Related Subcategories" },
  ], []);

  // **Layer 2: Business Unit Level**
  const BusinessUnitColumns = useMemo(() => [
    { accessorKey: "businessUnitAbbr", header: "Business Unit", enableEditing: false },
    {
      accessorKey: "businessUnitOwner",
      header: "Business Unit Owner",
      Cell: ({ cell }) => cell.getValue() ? cell.getValue().split(", ").join(", ") : "N/A",
      Edit: ({ cell }) => (
        <Autocomplete
          multiple
          options={[]} // Updated dynamically
          defaultValue={cell.getValue() ? cell.getValue().split(", ") : []}
          onInputChange={async (event, newValue) => {
            if (newValue) {
              const workerNames = await fetchWorkerNames(newValue);
              handleSaveCell(cell, workerNames.join(", "));
            }
          }}
          renderInput={(params) => <TextField {...params} label="Search Owners" />}
        />
      ),
    },
    {
      accessorKey: "auditorSubcatCustodian",
      header: "Auditor Subcategory Custodian",
      Cell: ({ cell }) => cell.getValue() ? cell.getValue().split(", ").join(", ") : "N/A",
      Edit: ({ cell }) => (
        <Autocomplete
          multiple
          options={[]} // Updated dynamically
          defaultValue={cell.getValue() ? cell.getValue().split(", ") : []}
          onInputChange={async (event, newValue) => {
            if (newValue) {
              const workerNames = await fetchWorkerNames(newValue);
              handleSaveCell(cell, workerNames.join(", "));
            }
          }}
          renderInput={(params) => <TextField {...params} label="Search Custodians" />}
        />
      ),
    },
    {
      accessorKey: "auditorIsInScope",
      header: "Auditor Is In Scope",
      Edit: ({ cell }) => (
        <TextField
          select
          defaultValue={cell.getValue() || ""}
          onChange={(event) => handleSaveCell(cell, event.target.value)}
        >
          <MenuItem value="Yes">Yes</MenuItem>
          <MenuItem value="No">No</MenuItem>
        </TextField>
      ),
    },
    {
      accessorKey: "auditorJustification",
      header: "Auditor Justification",
      Edit: ({ cell }) => (
        <TextField
          defaultValue={cell.getValue() || ""}
          onChange={(event) => handleSaveCell(cell, event.target.value)}
          disabled={cell.row.original.auditorIsInScope !== "No"}
        />
      ),
    },
    {
      accessorKey: "auditorProfileType",
      header: "Auditor Profile Type",
      Edit: ({ cell }) => (
        <TextField
          select
          defaultValue={cell.getValue() || ""}
          onChange={(event) => handleSaveCell(cell, event.target.value)}
        >
          {ProfileTypeOptions.map((option) => (
            <MenuItem key={option} value={option}>
              {option}
            </MenuItem>
          ))}
        </TextField>
      ),
    },
    {
      accessorKey: "auditorConsumingFromBusinessUnit",
      header: "Auditor Consuming From Business Unit",
      Edit: ({ cell }) => (
        <TextField
          select
          defaultValue={cell.getValue() || ""}
          onChange={(event) => handleSaveCell(cell, event.target.value)}
          disabled={!["Consumer", "Both"].includes(cell.row.original.auditorProfileType)}
        >
          {BusinessUnitOptions.map((option) => (
            <MenuItem key={option} value={option}>
              {option}
            </MenuItem>
          ))}
        </TextField>
      ),
    },
  ], []);

  // **Layer 3: Profile Type Info Panel**
  const renderInfoPanel = () => (
    <Box p={2}>
      <Typography variant="h6">Profile Type Definitions:</Typography>
      <ul>
        <li><strong>Provider</strong> - Supplies services to other BUs</li>
        <li><strong>Consumer</strong> - Receives services from other BUs</li>
        <li><strong>Both</strong> - Acts as both Provider & Consumer</li>
        <li><strong>Inheritor</strong> - Inherits control from another BU</li>
      </ul>
    </Box>
  );

  // **Expands Subcategory â†’ Business Units**
  const renderSubRow = ({ row }) => (
    <MaterialReactTable
      columns={BusinessUnitColumns}
      data={row.original.businessUnits}
      enableEditing
      editingMode="cell"
      renderDetailPanel={renderInfoPanel}
    />
  );

  return (
    <MaterialReactTable
      columns={SubcategoryColumns}
      data={tableData}
      enableExpanding
      renderDetailPanel={renderSubRow}
    />
  );
};

export default CSFScopeTable;
