// components/Rescope/CustodianView/CustodianModal.jsx
import React, { useState, useEffect, useCallback } from 'react';
import {
  Dialog, DialogTitle, DialogContent, DialogActions,
  Box, Button, TextField, MenuItem, Typography, Snackbar, Alert
} from '@mui/material';
import WorkerSearchModal from '../Shared/WorkerSearchModal';
import axios from 'axios';

const CustodianModal = ({ open, onClose, data, onSave }) => {
  const [form, setForm] = useState({
    subcatOwnerAcceptAuditorRecommendation: 'No',
    subcatOwnerSubcatCustodian: '',
    subcatOwnerIsInScope: '',
    subcatOwnerJustification: '',
    subcatOwnerMaturityProjection: '',
    subcatOwnerProfileType: '',
    subcatOwnerConsumingFromBusinessUnit: '',
    subcatOwnerDepartmentName: ''
  });
  const [workerModalOpen, setWorkerModalOpen] = useState(false);
  const [editingField, setEditingField] = useState('');
  const [snackbar, setSnackbar] = useState({ open: false, message: '', severity: 'success' });

  // Reset form on open
  useEffect(() => {
    if (open) {
      setForm({
        subcatOwnerAcceptAuditorRecommendation: 'No',
        subcatOwnerSubcatCustodian: data.subcatOwnerSubcatCustodian || '',
        subcatOwnerIsInScope: data.subcatOwnerIsInScope || '',
        subcatOwnerJustification: data.subcatOwnerJustification || '',
        subcatOwnerMaturityProjection: data.subcatOwnerMaturityProjection || '',
        subcatOwnerProfileType: data.subcatOwnerProfileType || '',
        subcatOwnerConsumingFromBusinessUnit: data.subcatOwnerConsumingFromBusinessUnit || '',
        subcatOwnerDepartmentName: data.subcatOwnerDepartmentName || ''
      });
    }
  }, [open, data]);

  const handleChange = useCallback((field, value) => {
    setForm(f => ({ ...f, [field]: value }));
  }, []);

  const openWorkerModal = useCallback(() => {
    setEditingField('subcatOwnerSubcatCustodian');
    setWorkerModalOpen(true);
  }, []);

  const handleWorkerSelect = useCallback(value => {
    handleChange(editingField, value);
  }, [editingField, handleChange]);

  const handleSave = async () => {
    // Validation when Accept = No
    if (form.subcatOwnerAcceptAuditorRecommendation === 'No') {
      if (!form.subcatOwnerIsInScope) {
        setSnackbar({ open: true, message: 'In Scope? is required', severity: 'error' });
        return;
      }
      if (form.subcatOwnerIsInScope === 'No' && !form.subcatOwnerJustification) {
        setSnackbar({ open: true, message: 'Justification is required when Out‑of‑Scope', severity: 'error' });
        return;
      }
    }

    // Build payload
    const payload = {
      businessUnitAbbr: data.businessUnitAbbr,
      subcategoryName: data.subcategoryName,
      subcatOwnerAcceptAuditorRecommendation: form.subcatOwnerAcceptAuditorRecommendation
    };

    if (form.subcatOwnerAcceptAuditorRecommendation === 'Yes') {
      // copy auditor → owner
      payload.subcatOwnerSubcatCustodian           = data.auditorSubcatCustodian;
      payload.subcatOwnerIsInScope                  = data.auditorIsInScope;
      payload.subcatOwnerJustification              = data.auditorJustification;
      payload.subcatOwnerMaturityProjection         = data.auditorMaturityProjection;
      payload.subcatOwnerProfileType                = data.auditorProfileType;
      payload.subcatOwnerConsumingFromBusinessUnit  = data.auditorConsumingFromBusinessUnit;
      payload.subcatOwnerDepartmentName             = data.auditorDepartmentName;
    } else {
      // use user inputs
      payload.subcatOwnerSubcatCustodian           = form.subcatOwnerSubcatCustodian;
      payload.subcatOwnerIsInScope                  = form.subcatOwnerIsInScope;
      payload.subcatOwnerJustification              = form.subcatOwnerJustification;
      payload.subcatOwnerMaturityProjection         = form.subcatOwnerMaturityProjection;
      payload.subcatOwnerProfileType                = form.subcatOwnerProfileType;
      payload.subcatOwnerConsumingFromBusinessUnit  = form.subcatOwnerConsumingFromBusinessUnit;
      payload.subcatOwnerDepartmentName             = form.subcatOwnerDepartmentName;
    }

    try {
      await axios.post('/UpdateCustodianBUScopeData', payload);
      onSave({ ...data, ...payload });
      setSnackbar({ open: true, message: 'Save successful', severity: 'success' });
      onClose();
    } catch (err) {
      console.error(err);
      setSnackbar({ open: true, message: 'Save failed', severity: 'error' });
    }
  };

  // Conditional enable/disable
  const justDisabled    = form.subcatOwnerIsInScope === 'Yes';
  const maturityEnabled = form.subcatOwnerIsInScope === 'Yes';
  const profileEnabled  = form.subcatOwnerIsInScope === 'Yes';
  const consumeEnabled  = ['Consumer','Both'].includes(form.subcatOwnerProfileType);

  return (
    <>
      <Dialog open={open} onClose={onClose} fullWidth maxWidth="sm">
        <DialogTitle>
          Edit Custodian — {data.subcategoryName} / {data.businessUnitAbbr}
        </DialogTitle>
        <DialogContent dividers>
          {/* 1. Accept Recommendation */}
          <TextField
            label="Accept Auditor Recommendation?"
            select
            value={form.subcatOwnerAcceptAuditorRecommendation}
            onChange={e => handleChange('subcatOwnerAcceptAuditorRecommendation', e.target.value)}
            fullWidth
            margin="normal"
          >
            <MenuItem value="Yes">Yes</MenuItem>
            <MenuItem value="No">No</MenuItem>
          </TextField>

          {/* 2. Custodian */}
          <Box mt={2}>
            <Typography variant="subtitle2">
              Auditor Recommendation (Custodian):
              <strong> {data.auditorSubcatCustodian}</strong>
            </Typography>
            <Box display="flex" alignItems="center" mt={1} mb={2}>
              <TextField
                label="Your Custodian"
                value={form.subcatOwnerSubcatCustodian}
                fullWidth
                InputProps={{ readOnly: true }}
              />
              <Button sx={{ ml: 1 }} onClick={openWorkerModal} variant="outlined">
                Edit
              </Button>
            </Box>
          </Box>

          {/* 3. In Scope */}
          <Box>
            <Typography variant="subtitle2">
              Auditor Recommendation (In Scope?): 
              <strong> {data.auditorIsInScope}</strong>
            </Typography>
            <TextField
              label="In Scope?"
              select
              value={form.subcatOwnerIsInScope}
              onChange={e => handleChange('subcatOwnerIsInScope', e.target.value)}
              fullWidth
              margin="normal"
            >
              <MenuItem value="Yes">Yes</MenuItem>
              <MenuItem value="No">No</MenuItem>
            </TextField>
          </Box>

          {/* 4. Justification */}
          <Box>
            <Typography variant="subtitle2">
              Auditor Recommendation (Justification): 
              <strong> {data.auditorJustification || '—'}</strong>
            </Typography>
            <TextField
              label="Justification"
              value={form.subcatOwnerJustification}
              onChange={e => handleChange('subcatOwnerJustification', e.target.value)}
              fullWidth
              margin="normal"
              multiline rows={2}
              disabled={justDisabled}
            />
          </Box>

          {/* 5. Maturity Projection */}
          <Box>
            <Typography variant="subtitle2">
              Auditor Recommendation (Maturity): 
              <strong> {data.auditorMaturityProjection}</strong>
            </Typography>
            <TextField
              label="Maturity Projection"
              select
              value={form.subcatOwnerMaturityProjection}
              onChange={e => handleChange('subcatOwnerMaturityProjection', e.target.value)}
              fullWidth
              margin="normal"
              disabled={!maturityEnabled}
            >
              {['Increase','Decrease','Maintain'].map(opt => (
                <MenuItem key={opt} value={opt}>{opt}</MenuItem>
              ))}
            </TextField>
          </Box>

          {/* 6. Profile Type */}
          <Box>
            <Typography variant="subtitle2">
              Auditor Recommendation (Profile): 
              <strong> {data.auditorProfileType}</strong>
            </Typography>
            <TextField
              label="Profile Type"
              select
              value={form.subcatOwnerProfileType}
              onChange={e => handleChange('subcatOwnerProfileType', e.target.value)}
              fullWidth
              margin="normal"
              disabled={!profileEnabled}
            >
              {['Provider','Consumer','Both','Inheritor'].map(opt => (
                <MenuItem key={opt} value={opt}>{opt}</MenuItem>
              ))}
            </TextField>
          </Box>

          {/* 7. Consuming From BU */}
          <Box>
            <Typography variant="subtitle2">
              Auditor Recommendation (Consuming From BU): 
              <strong> {data.auditorConsumingFromBusinessUnit}</strong>
            </Typography>
            <TextField
              label="Consuming From BU"
              select
              value={form.subcatOwnerConsumingFromBusinessUnit}
              onChange={e => handleChange('subcatOwnerConsumingFromBusinessUnit', e.target.value)}
              fullWidth
              margin="normal"
              disabled={!consumeEnabled}
            >
              {['ABC','UIO','POA','SKA-C','Other'].map(opt => (
                <MenuItem key={opt} value={opt}>{opt}</MenuItem>
              ))}
            </TextField>
          </Box>

          {/* 8. Department */}
          <Box mb={2}>
            <Typography variant="subtitle2">
              Auditor Recommendation (Department): 
              <strong> {data.auditorDepartmentName}</strong>
            </Typography>
            <TextField
              label="Department"
              value={form.subcatOwnerDepartmentName}
              onChange={e => handleChange('subcatOwnerDepartmentName', e.target.value)}
              fullWidth
              margin="normal"
            />
          </Box>
        </DialogContent>

        <DialogActions>
          <Button onClick={onClose}>Cancel</Button>
          <Button onClick={handleSave} variant="contained">Save</Button>
        </DialogActions>
      </Dialog>

      {/* Worker Search Modal */}
      {workerModalOpen && (
        <WorkerSearchModal
          open={workerModalOpen}
          onClose={() => setWorkerModalOpen(false)}
          initialValue={form.subcatOwnerSubcatCustodian}
          onSelect={handleWorkerSelect}
        />
      )}

      {/* Snackbar */}
      <Snackbar
        open={snackbar.open}
        autoHideDuration={4000}
        onClose={() => setSnackbar(s => ({ ...s, open: false }))}
      >
        <Alert
          onClose={() => setSnackbar(s => ({ ...s, open: false }))}
          severity={snackbar.severity}
          sx={{ width: '100%' }}
        >
          {snackbar.message}
        </Alert>
      </Snackbar>
    </>
  );
};

export default CustodianModal;
