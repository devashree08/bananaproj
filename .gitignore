import React, { useState, useEffect } from "react";
import axios from "axios";
import {
  Card,
  CardContent,
  Typography,
  Button,
  Collapse,
  Grid,
  FormControl,
  InputLabel,
  Select,
  MenuItem,
  TextField,
  Switch,
  FormControlLabel,
  CircularProgress,
  Alert,
  IconButton,
  Checkbox,
  ListItemText,
} from "@mui/material";
import { ExpandMore, ExpandLess } from "@mui/icons-material";

const ScopeManagement = () => {
  const [data, setData] = useState([]);
  const [expandedSubcategory, setExpandedSubcategory] = useState({});
  const [expandedBU, setExpandedBU] = useState({});
  const [selectedSubcategories, setSelectedSubcategories] = useState([]);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState(null);

  // Fetch CSF Scope Data
  const fetchCSFScopeData = async () => {
    try {
      setLoading(true);
      const response = await axios.get("/api/scope");
      setData(response.data);
    } catch (err) {
      console.error("Error fetching CSF scope data:", err);
      setError("Failed to load data. Please try again.");
    } finally {
      setLoading(false);
    }
  };

  useEffect(() => {
    fetchCSFScopeData();
  }, []);

  const handleExpandSubcategory = (subcategoryId) => {
    setExpandedSubcategory((prev) => ({
      ...prev,
      [subcategoryId]: !prev[subcategoryId],
    }));
  };

  const handleExpandBU = (buIndex) => {
    setExpandedBU((prev) => ({
      ...prev,
      [buIndex]: !prev[buIndex],
    }));
  };

  const handleFieldChange = (index, field, value) => {
    setData((prev) =>
      prev.map((item, i) => (i === index ? { ...item, [field]: value } : item))
    );
  };

  const handleFilterChange = (event) => {
    setSelectedSubcategories(event.target.value);
  };

  if (loading) return <CircularProgress sx={{ display: "block", margin: "auto", mt: 4 }} />;
  if (error) return <Alert severity="error">{error}</Alert>;

  // Extract unique subcategories for filter dropdown
  const uniqueSubcategories = [...new Set(data.map((item) => item.subcategoryName))];

  return (
    <div style={{ padding: "20px" }}>
      {/* Multi-Select Filter */}
      <FormControl fullWidth margin="normal">
        <InputLabel>Select Subcategories</InputLabel>
        <Select
          multiple
          value={selectedSubcategories}
          onChange={handleFilterChange}
          renderValue={(selected) => selected.join(", ")}
        >
          {uniqueSubcategories.map((subcat) => (
            <MenuItem key={subcat} value={subcat}>
              <Checkbox checked={selectedSubcategories.indexOf(subcat) > -1} />
              <ListItemText primary={subcat} />
            </MenuItem>
          ))}
        </Select>
      </FormControl>

      {/* Group data by subcategory */}
      {Object.entries(
        data.reduce((acc, item) => {
          if (!acc[item.subcategoryId]) {
            acc[item.subcategoryId] = [];
          }
          acc[item.subcategoryId].push(item);
          return acc;
        }, {})
      )
        .filter(([_, items]) =>
          selectedSubcategories.length === 0 || selectedSubcategories.includes(items[0].subcategoryName)
        )
        .map(([subcategoryId, items]) => (
          <Card key={subcategoryId} sx={{ marginBottom: 2 }}>
            <CardContent>
              <Typography variant="h6">{items[0].subcategoryName}</Typography>
              <Typography variant="body2" color="textSecondary">
                {items[0].subcategoryDescription}
              </Typography>
              <Typography variant="body2">
                Related: {items[0].relatedCsf1_1Subcategories}
              </Typography>
              <Button onClick={() => handleExpandSubcategory(subcategoryId)} sx={{ marginTop: 1 }}>
                {expandedSubcategory[subcategoryId] ? "Hide Details" : "Show Details"}
              </Button>
            </CardContent>
            <Collapse in={expandedSubcategory[subcategoryId]}>
              <CardContent>
                <Grid container spacing={2}>
                  {items.map((item, index) => (
                    <Grid item xs={12} key={index}>
                      <Card variant="outlined">
                        <CardContent>
                          <Grid container alignItems="center" justifyContent="space-between">
                            <Typography variant="subtitle1">
                              {item.businessUnitAbbr} - {item.businessUnitOwner}
                            </Typography>
                            <IconButton onClick={() => handleExpandBU(index)}>
                              {expandedBU[index] ? <ExpandLess /> : <ExpandMore />}
                            </IconButton>
                          </Grid>

                          <Collapse in={expandedBU[index]}>
                            {/* Auditor Fields */}
                            <FormControl fullWidth margin="normal">
                              <InputLabel>Custodian</InputLabel>
                              <Select
                                value={item.auditorSubcatCustodian || ""}
                                onChange={(e) =>
                                  handleFieldChange(index, "auditorSubcatCustodian", e.target.value)
                                }
                              >
                                <MenuItem value="James Charles">James Charles</MenuItem>
                              </Select>
                            </FormControl>

                            <FormControlLabel
                              control={
                                <Switch
                                  checked={item.auditorIsInScope || false}
                                  onChange={(e) =>
                                    handleFieldChange(index, "auditorIsInScope", e.target.checked)
                                  }
                                />
                              }
                              label="In Scope?"
                            />

                            {!item.auditorIsInScope && (
                              <TextField
                                fullWidth
                                margin="normal"
                                label="Justification"
                                value={item.auditorJustification || ""}
                                onChange={(e) =>
                                  handleFieldChange(index, "auditorJustification", e.target.value)
                                }
                              />
                            )}

                            <FormControl fullWidth margin="normal">
                              <InputLabel>Profile Type</InputLabel>
                              <Select
                                value={item.auditorProfileType || ""}
                                onChange={(e) =>
                                  handleFieldChange(index, "auditorProfileType", e.target.value)
                                }
                              >
                                <MenuItem value="Consumer">Consumer</MenuItem>
                                <MenuItem value="Both">Both</MenuItem>
                                <MenuItem value="Other">Other</MenuItem>
                              </Select>
                            </FormControl>
                          </Collapse>
                        </CardContent>
                      </Card>
                    </Grid>
                  ))}
                </Grid>
              </CardContent>
            </Collapse>
          </Card>
        ))}
    </div>
  );
};

export default ScopeManagement;
