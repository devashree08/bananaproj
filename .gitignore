import React, { useEffect, useState, useMemo } from "react";
import MaterialReactTable from "material-react-table";
import { MenuItem, TextField, Autocomplete, Box, Typography } from "@mui/material";
import axios from "axios";

// Profile Type & Business Unit Options
const ProfileTypeOptions = ["Provider", "Consumer", "Both", "Inheritor"];
const BusinessUnitOptions = ["ABC", "UIO", "POA", "SKA-C"];

const CSFScopeTable = () => {
  const [tableData, setTableData] = useState([]);

  // Fetch Data from API
  useEffect(() => {
    const fetchData = async () => {
      try {
        const response = await axios.get("/api/ScopeData");
        const groupedData = Object.values(
          response.data.reduce((acc, item) => {
            if (!acc[item.subcategoryId]) {
              acc[item.subcategoryId] = {
                subcategoryId: item.subcategoryId,
                subcategoryName: item.subcategoryName,
                subcategoryDescription: item.subcategoryDescription,
                relatedSubcategories: item.relatedCsf1_1Subcategories,
                businessUnits: [],
              };
            }
            acc[item.subcategoryId].businessUnits.push(item);
            return acc;
          }, {})
        );
        setTableData(groupedData);
      } catch (error) {
        console.error("Error fetching scope data:", error);
      }
    };
    fetchData();
  }, []);

  // Handle Save Edits (Instantaneous Updates)
  const handleSaveCell = (cell, value) => {
    setTableData((prevData) =>
      prevData.map((subcategory) => ({
        ...subcategory,
        businessUnits: subcategory.businessUnits.map((bu) =>
          bu.businessUnitAbbr === cell.row.original.businessUnitAbbr
            ? {
                ...bu,
                [cell.column.id]: value,
                ...(cell.column.id === "auditorProfileType" &&
                !["Consumer", "Both"].includes(value)
                  ? { auditorConsumingFromBusinessUnit: "" }
                  : {}),
                ...(cell.column.id === "auditorIsInScope" && value === "Yes"
                  ? { auditorJustification: "" }
                  : {}),
              }
            : bu
        ),
      }))
    );
  };

  // **Layer 1: Subcategory Level (Multi-Select Filtering)**
  const SubcategoryColumns = useMemo(() => [
    {
      accessorKey: "subcategoryName",
      header: "Subcategory",
      size: 120,
      filterVariant: "multi-select",
      filterSelectOptions: [...new Set(tableData.map((row) => row.subcategoryName))], // Unique Subcategories
    },
    {
      accessorKey: "subcategoryDescription",
      header: "Description",
      size: 300,
      Cell: ({ cell }) => (
        <div style={{ whiteSpace: "normal", wordWrap: "break-word", overflowWrap: "break-word" }}>
          {cell.getValue()}
        </div>
      ),
    },
    { accessorKey: "relatedSubcategories", header: "Related Subcategories" },
  ], [tableData]);

  // **Layer 2: Business Unit Level (Inside MRT Modal)**
  const BusinessUnitColumns = useMemo(() => [
    { accessorKey: "businessUnitAbbr", header: "BU", enableEditing: false },
    {
      accessorKey: "businessUnitOwner",
      header: "BU Owner",
      Edit: ({ cell }) => (
        <Autocomplete
          multiple
          options={[]} // Updated dynamically
          defaultValue={cell.getValue() ? cell.getValue().split(", ") : []}
          onInputChange={async (event, newValue) => {
            if (newValue) {
              const workerNames = await fetchWorkerNames(newValue);
              handleSaveCell(cell, workerNames.join(", "));
            }
          }}
          renderInput={(params) => <TextField {...params} label="Search Owners" />}
        />
      ),
    },
    {
      accessorKey: "auditorIsInScope",
      header: "In Scope?",
      Edit: ({ cell }) => (
        <TextField
          select
          defaultValue={cell.getValue() || ""}
          onChange={(event) => handleSaveCell(cell, event.target.value)}
        >
          <MenuItem value="Yes">Yes</MenuItem>
          <MenuItem value="No">No</MenuItem>
        </TextField>
      ),
    },
    {
      accessorKey: "auditorJustification",
      header: "Justification",
      Edit: ({ cell }) => (
        <TextField
          defaultValue={cell.getValue() || ""}
          onChange={(event) => handleSaveCell(cell, event.target.value)}
          disabled={cell.row.original.auditorIsInScope !== "No"}
        />
      ),
    },
    {
      accessorKey: "auditorProfileType",
      header: "Profile Type",
      Edit: ({ cell }) => (
        <TextField
          select
          defaultValue={cell.getValue() || ""}
          onChange={(event) => handleSaveCell(cell, event.target.value)}
        >
          {ProfileTypeOptions.map((option) => (
            <MenuItem key={option} value={option}>
              {option}
            </MenuItem>
          ))}
        </TextField>
      ),
    },
    {
      accessorKey: "auditorConsumingFromBusinessUnit",
      header: "Consuming From BU",
      Edit: ({ cell }) => (
        <TextField
          select
          defaultValue={cell.getValue() || ""}
          onChange={(event) => handleSaveCell(cell, event.target.value)}
          disabled={!["Consumer", "Both"].includes(cell.row.original.auditorProfileType)}
        >
          {BusinessUnitOptions.map((option) => (
            <MenuItem key={option} value={option}>
              {option}
            </MenuItem>
          ))}
        </TextField>
      ),
    },
  ], []);

  return (
    <MaterialReactTable
      columns={SubcategoryColumns}
      data={tableData}
      enableExpanding
      enableEditing
      editingMode="modal"
      muiTableBodyCellEditTextFieldProps={{ sx: { minWidth: "600px" } }} // Expanded Modal Width
      enableColumnFilters
      enableHorizontalScroll
      renderDetailPanel={({ row }) => (
        <MaterialReactTable
          columns={BusinessUnitColumns}
          data={row.original.businessUnits}
          enableExpanding
          enableEditing
          editingMode="modal"
          renderDetailPanel={() => (
            <Box p={2} sx={{ backgroundColor: "#f4f4f4", borderRadius: "8px", marginTop: "10px" }}>
              <Typography variant="h6">Profile Type Definitions</Typography>
              <ul>
                <li><strong>Provider:</strong> Supplies services to other BUs.</li>
                <li><strong>Consumer:</strong> Receives services from other BUs.</li>
                <li><strong>Both:</strong> Acts as both Provider & Consumer.</li>
                <li><strong>Inheritor:</strong> Inherits control from another BU.</li>
              </ul>
            </Box>
          )}
        />
      )}
    />
  );
};

export default CSFScopeTable;
