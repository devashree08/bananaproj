import React, { useEffect, useState } from 'react';
import {
  Accordion, AccordionSummary, AccordionDetails,
  Typography, Table, TableHead, TableBody,
  TableRow, TableCell, Button, TablePagination, Box
} from '@mui/material';
import ExpandMoreIcon from '@mui/icons-material/ExpandMore';
import axios from 'axios';
import CustodianModal from './CustodianModal';
import ScopeDataFilters from './ScopeDataFilters';

const CustodianAccordion = () => {
  const [data, setData] = useState([]);
  const [filters, setFilters] = useState(null);
  const [page, setPage] = useState(0);
  const [rpp, setRpp] = useState(10);
  const [currentItem, setCurrentItem] = useState(null);
  const [modalOpen, setModalOpen] = useState(false);

  const fetchData = async (params) => {
    try {
      const res = await axios.get('/api/GetBUScopeData', { params: params||{} });
      const grouped = {};
      res.data.forEach(i => {
        if (!grouped[i.subcategoryId]) {
          grouped[i.subcategoryId] = {
            subcategoryId: i.subcategoryId,
            subcategoryName: i.subcategoryName,
            subcategoryDescription: i.subcategoryDescription,
            relatedSubcategories: i.relatedCsf1_1Subcategories,
            businessUnits: []
          };
        }
        if (!grouped[i.subcategoryId].businessUnits.find(b => b.businessUnitAbbr === i.businessUnitAbbr)) {
          grouped[i.subcategoryId].businessUnits.push(i);
        }
      });
      setData(Object.values(grouped));
    } catch (e) {
      console.error(e);
    }
  };

  useEffect(() => {
    fetchData(filters);
  }, [filters]);

  const handleFilterChange = fv => {
    setFilters(fv);
    setPage(0);
  };

  const paged = data.slice(page * rpp, (page + 1) * rpp);

  const openModal = item => {
    setCurrentItem(item);
    setModalOpen(true);
  };

  const saveCustodianData = updated => {
    setData(d =>
      d.map(sc =>
        sc.subcategoryName === updated.subcategoryName
          ? {
              ...sc,
              businessUnits: sc.businessUnits.map(b =>
                b.businessUnitAbbr === updated.businessUnitAbbr ? updated : b
              )
            }
          : sc
      )
    );
    setModalOpen(false);
  };

  return (
    <Box sx={{ m: 2 }}>
      <ScopeDataFilters
        onFilterChange={handleFilterChange}
        filterOptions={{
          subcategoryNames: data.map(d => d.subcategoryName),
          bus: ['ABC', 'UIO', 'POA', 'SKA-C'],
          buOwners: Array.from(new Set(data.flatMap(d => d.businessUnits.map(b => b.businessUnitOwner)))),
          subcatCustodians: Array.from(new Set(data.flatMap(d => d.businessUnits.map(b => b.auditorSubcatCustodian)))),
          inScopeOptions: ['Yes', 'No'],
          profileTypes: ['Provider', 'Consumer', 'Both', 'Inheritor']
        }}
      />

      {/* LevelÂ 1 header */}
      <Box display="flex" sx={{ borderBottom: '1px solid #ccc', mb: 2, p: 1 }}>
        <Box flex={1}>
          <Typography fontWeight="bold">Subcategory</Typography>
        </Box>
        <Box flex={2}>
          <Typography fontWeight="bold">Description</Typography>
        </Box>
        <Box flex={1}>
          <Typography fontWeight="bold">Related CSF</Typography>
        </Box>
      </Box>

      {paged.map(sc => (
        <Accordion key={sc.subcategoryId}>
          <AccordionSummary expandIcon={<ExpandMoreIcon />}>
            <Box display="flex" width="100%">
              <Box flex={1}>
                <Typography>{sc.subcategoryName}</Typography>
              </Box>
              <Box flex={2}>
                <Typography>{sc.subcategoryDescription}</Typography>
              </Box>
              <Box flex={1}>
                <Typography>{sc.relatedSubcategories}</Typography>
              </Box>
            </Box>
          </AccordionSummary>
          <AccordionDetails>
            <Table size="small">
              <TableHead sx={{ backgroundColor: 'black' }}>
                <TableRow>
                  <TableCell sx={{ color: 'white', fontWeight: 'bold' }}>BU</TableCell>
                  <TableCell sx={{ color: 'white', fontWeight: 'bold' }}>Action</TableCell>
                </TableRow>
              </TableHead>
              <TableBody>
                {sc.businessUnits.map(bu => (
                  <TableRow key={bu.businessUnitAbbr}>
                    <TableCell>{bu.businessUnitAbbr}</TableCell>
                    <TableCell>
                      <Button
                        variant="outlined"
                        size="small"
                        onClick={() => openModal(bu)}
                      >
                        Review as Custodian
                      </Button>
                    </TableCell>
                  </TableRow>
                ))}
              </TableBody>
            </Table>
          </AccordionDetails>
        </Accordion>
      ))}

      <TablePagination
        component="div"
        count={data.length}
        page={page}
        onPageChange={(e, p) => setPage(p)}
        rowsPerPage={rpp}
        onRowsPerPageChange={e => { setRpp(+e.target.value); setPage(0); }}
        rowsPerPageOptions={[10, 20, 50]}
      />

      {currentItem && (
        <CustodianModal
          open={modalOpen}
          onClose={() => setModalOpen(false)}
          data={currentItem}
          onSave={saveCustodianData}
        />
      )}
    </Box>
  );
};

export default CustodianAccordion;
