import React, { useState, useEffect } from "react";
import { TreeView, TreeItem } from "@mui/lab";
import { DataGrid } from "@mui/x-data-grid";
import { ExpandMore, ChevronRight } from "@mui/icons-material";
import {
  FormControl,
  MenuItem,
  Select,
  Checkbox,
  FormControlLabel,
  TextField,
} from "@mui/material";

const CSFScopeTable = () => {
  const [treeData, setTreeData] = useState([]);
  const [loading, setLoading] = useState(true);

  // Fetch data from API
  useEffect(() => {
    fetch("/api/v1/GetCSFScopeData")
      .then((response) => response.json())
      .then((data) => {
        setTreeData(formatTreeData(data));
        setLoading(false);
      })
      .catch((error) => {
        console.error("Error fetching data:", error);
        setLoading(false);
      });
  }, []);

  // Transform API response into a tree structure
  const formatTreeData = (data) => {
    const groupedData = {};

    data.forEach((item) => {
      if (!groupedData[item.SubcategoryID]) {
        groupedData[item.SubcategoryID] = {
          id: `subcat-${item.SubcategoryID}`,
          SubcategoryID: item.SubcategoryID,
          SubcategoryName: item.SubcategoryName,
          SubcategoryDescription: item.SubcategoryDescription,
          RelatedCSF1_1Subcategories: item.RelatedCSF1_1Subcategories,
          businessUnits: [],
        };
      }

      groupedData[item.SubcategoryID].businessUnits.push({
        id: `bu-${item.SubcategoryID}-${item.BusinessUnitAbbreviation}`,
        BusinessUnitName: item.BusinessUnitName,
        BusinessUnitAbbreviation: item.BusinessUnitAbbreviation,
        AuditorIsInScope: item.AuditorIsInScope,
        AuditorJustification: item.AuditorJustification,
        AuditorProfileType: item.AuditorProfileType,
        AuditorConsumingFromBusinessUnit: item.AuditorConsumingFromBusinessUnit,
        SubcatOwnerAcceptRecommendation: item.SubcatOwnerAcceptRecommendation,
        SubcatOwnerIsInScope: item.SubcatOwnerIsInScope,
        SubcatOwnerJustification: item.SubcatOwnerJustification,
        SubcatOwnerProfileType: item.SubcatOwnerProfileType,
        SubcatOwnerConsumingFromBusinessUnit: item.SubcatOwnerConsumingFromBusinessUnit,
      });
    });

    return Object.values(groupedData);
  };

  // Columns for DataGrid
  const columns = [
    { field: "BusinessUnitName", headerName: "Business Unit", width: 200 },
    {
      field: "AuditorIsInScope",
      headerName: "Auditor - In Scope?",
      width: 150,
      renderCell: (params) => (
        <Checkbox checked={params.value} onChange={() => {}} />
      ),
    },
    {
      field: "AuditorJustification",
      headerName: "Auditor - Justification",
      width: 250,
      renderCell: (params) => (
        <TextField
          variant="standard"
          fullWidth
          defaultValue={params.value}
          onChange={() => {}}
        />
      ),
    },
    {
      field: "AuditorProfileType",
      headerName: "Auditor - Profile Type",
      width: 200,
      renderCell: (params) => (
        <FormControl variant="standard" fullWidth>
          <Select defaultValue={params.value} onChange={() => {}}>
            <MenuItem value="Provider">Provider</MenuItem>
            <MenuItem value="Consumer">Consumer</MenuItem>
            <MenuItem value="Inheritor">Inheritor</MenuItem>
            <MenuItem value="Both">Both</MenuItem>
          </Select>
        </FormControl>
      ),
    },
    {
      field: "SubcatOwnerAcceptRecommendation",
      headerName: "Owner - Accept Recommendation?",
      width: 180,
      renderCell: (params) => (
        <FormControlLabel
          control={<Checkbox checked={params.value} onChange={() => {}} />}
          label=""
        />
      ),
    },
    {
      field: "SubcatOwnerJustification",
      headerName: "Owner - Justification",
      width: 250,
      renderCell: (params) => (
        <TextField
          variant="standard"
          fullWidth
          defaultValue={params.value}
          onChange={() => {}}
        />
      ),
    },
    {
      field: "SubcatOwnerProfileType",
      headerName: "Owner - Profile Type",
      width: 200,
      renderCell: (params) => (
        <FormControl variant="standard" fullWidth>
          <Select defaultValue={params.value} onChange={() => {}}>
            <MenuItem value="Provider">Provider</MenuItem>
            <MenuItem value="Consumer">Consumer</MenuItem>
            <MenuItem value="Inheritor">Inheritor</MenuItem>
            <MenuItem value="Both">Both</MenuItem>
          </Select>
        </FormControl>
      ),
    },
  ];

  return (
    <div>
      <h2>CSF Scope Data</h2>
      {loading ? (
        <p>Loading data...</p>
      ) : (
        <TreeView
          aria-label="CSF Scope Tree"
          defaultCollapseIcon={<ExpandMore />}
          defaultExpandIcon={<ChevronRight />}
        >
          {treeData.map((subcategory) => (
            <TreeItem
              key={subcategory.id}
              nodeId={subcategory.id}
              label={`${subcategory.SubcategoryName} - ${subcategory.SubcategoryDescription}`}
            >
              <div style={{ height: 250, width: "100%" }}>
                <DataGrid
                  rows={subcategory.businessUnits}
                  columns={columns}
                  getRowId={(row) => row.id}
                  pageSize={5}
                  disableSelectionOnClick
                />
              </div>
            </TreeItem>
          ))}
        </TreeView>
      )}
    </div>
  );
};

export default CSFScopeTable;
