import React, { useState, useEffect, useMemo } from "react";
import axios from "axios";
import MaterialReactTable from "material-react-table";
import {
  Select,
  MenuItem,
  Typography,
  CircularProgress,
  Alert,
} from "@mui/material";
import InfoIcon from "@mui/icons-material/Info";

const ScopeManagement = () => {
  const [data, setData] = useState([]);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState(null);

  useEffect(() => {
    const fetchCSFScopeData = async () => {
      try {
        setLoading(true);
        const response = await axios.get("/api/scope");
        setData(response.data);
      } catch (err) {
        console.error("Error fetching CSF scope data:", err);
        setError("Failed to load data. Please try again.");
      } finally {
        setLoading(false);
      }
    };
    fetchCSFScopeData();
  }, []);

  // Test Data (Only for Business Unit Owner & Auditor Custodian)
  const businessUnitOwners = ["Owner 1", "Owner 2", "Owner 3"];
  const auditors = ["Auditor A", "Auditor B", "Auditor C"];

  // API Data Values
  const profileTypes = ["Provider", "Contributor", "Both", "Inheritor"];
  const businessUnits = ["ABC", "UIO", "POA", "SKA-C"];

  // Define Table Columns with Dynamic Behaviors
  const columns = useMemo(
    () => [
      // Grouping Columns (Subcategory Level)
      {
        accessorKey: "subcategoryName",
        header: "Subcategory Name",
        enableGrouping: true,
      },
      {
        accessorKey: "subcategoryDescription",
        header: "Description",
        enableGrouping: true,
      },
      {
        accessorKey: "relatedCsf1_1Subcategories",
        header: "Related CSF 1.1",
        enableGrouping: true,
      },

      // Business Unit Level (Inline Editable)
      {
        accessorKey: "businessUnitAbbr",
        header: "Business Unit Abbr",
      },
      {
        accessorKey: "businessUnitOwner",
        header: "Business Unit Owner",
        enableEditing: true,
        editComponent: ({ cell, row }) => (
          <Select
            multiple
            value={cell.getValue() || []}
            onChange={(e) => row.updateData("businessUnitOwner", e.target.value)}
            fullWidth
          >
            {businessUnitOwners.map((owner) => (
              <MenuItem key={owner} value={owner}>
                {owner}
              </MenuItem>
            ))}
          </Select>
        ),
      },

      {
        accessorKey: "auditorSubcatCustodian",
        header: "Auditor Custodian",
        enableEditing: true,
        editComponent: ({ cell, row }) => (
          <Select
            multiple
            value={cell.getValue() || []}
            onChange={(e) => row.updateData("auditorSubcatCustodian", e.target.value)}
            fullWidth
          >
            {auditors.map((auditor) => (
              <MenuItem key={auditor} value={auditor}>
                {auditor}
              </MenuItem>
            ))}
          </Select>
        ),
      },

      {
        accessorKey: "auditorIsInScope",
        header: "Auditor In Scope?",
        enableEditing: true,
        editComponent: ({ cell, row }) => (
          <Select
            value={cell.getValue() || ""}
            onChange={(e) => row.updateData("auditorIsInScope", e.target.value)}
            fullWidth
          >
            <MenuItem value="Yes">Yes</MenuItem>
            <MenuItem value="No">No</MenuItem>
          </Select>
        ),
      },

      // Conditional Justification Column (Shown only if IsInScope = No)
      {
        accessorKey: "auditorJustification",
        header: "Auditor Justification",
        enableEditing: (row) => row.original.auditorIsInScope === "No",
      },

      {
        accessorKey: "maturityLevelProjection",
        header: "Maturity Level",
        enableEditing: true,
        editComponent: ({ cell, row }) => (
          <Select
            value={cell.getValue() || ""}
            onChange={(e) => row.updateData("maturityLevelProjection", e.target.value)}
            fullWidth
          >
            <MenuItem value="Increase">Increase</MenuItem>
            <MenuItem value="Decrease">Decrease</MenuItem>
            <MenuItem value="Maintains">Maintains</MenuItem>
          </Select>
        ),
      },

      {
        accessorKey: "auditorProfileType",
        header: "Profile Type",
        enableEditing: true,
        editComponent: ({ cell, row }) => (
          <Select
            value={cell.getValue() || ""}
            onChange={(e) => row.updateData("auditorProfileType", e.target.value)}
            fullWidth
          >
            {profileTypes.map((profile) => (
              <MenuItem key={profile} value={profile}>
                {profile}
              </MenuItem>
            ))}
          </Select>
        ),
      },

      // Conditional Consuming Business Unit Column
      {
        accessorKey: "auditorConsumingFromBusinessUnit",
        header: "Consuming From BU",
        enableEditing: (row) =>
          row.original.auditorProfileType === "Contributor" || row.original.auditorProfileType === "Both",
        editComponent: ({ cell, row }) => (
          <Select
            value={cell.getValue() || ""}
            onChange={(e) => row.updateData("auditorConsumingFromBusinessUnit", e.target.value)}
            fullWidth
          >
            {businessUnits.map((bu) => (
              <MenuItem key={bu} value={bu}>
                {bu}
              </MenuItem>
            ))}
          </Select>
        ),
      },

      {
        accessorKey: "subcatOwnerAcceptRecommendation",
        header: "Owner Accept Recommendation?",
        enableEditing: true,
        editComponent: ({ cell, row }) => (
          <Select
            value={cell.getValue() || ""}
            onChange={(e) => row.updateData("subcatOwnerAcceptRecommendation", e.target.value)}
            fullWidth
          >
            <MenuItem value="Yes">Yes</MenuItem>
            <MenuItem value="No">No</MenuItem>
          </Select>
        ),
      },
    ],
    []
  );

  return (
    <div style={{ padding: "20px" }}>
      {loading ? (
        <CircularProgress sx={{ display: "block", margin: "auto", mt: 4 }} />
      ) : error ? (
        <Alert severity="error">{error}</Alert>
      ) : (
        <MaterialReactTable
          columns={columns}
          data={data}
          enableGrouping
          enableEditing
          enableRowExpanding
          renderDetailPanel={({ row }) => <ProfileTypeDefinition />}
        />
      )}
    </div>
  );
};

// ðŸ“– Detail Panel with Profile Type Definitions
const ProfileTypeDefinition = () => {
  return (
    <div style={{ padding: "16px" }}>
      <Typography variant="h6">
        <InfoIcon fontSize="small" /> Profile Type Definitions
      </Typography>
      <Typography>ðŸŸ¢ <b>Provider:</b> Provides data to other units.</Typography>
      <Typography>ðŸŸ¡ <b>Contributor:</b> Contributes to shared initiatives.</Typography>
      <Typography>ðŸ”µ <b>Both:</b> Acts as both Provider and Contributor.</Typography>
      <Typography>ðŸ”´ <b>Inheritor:</b> Receives data but does not contribute.</Typography>
    </div>
  );
};

export default ScopeManagement;
