import React, { useState, useEffect, useMemo, useCallback } from "react";
import axios from "axios";
import { DataGrid } from "@mui/x-data-grid";
import {
  FormControl,
  MenuItem,
  Select,
  Checkbox,
  FormControlLabel,
  TextField,
  IconButton,
  Typography,
  Box,
} from "@mui/material";
import { ExpandMore, ChevronRight } from "@mui/icons-material";

// Secure API Fetch Function
const fetchCSFScopeData = async () => {
  try {
    const response = await axios.get("/api/v1/GetCSFScopeData", {
      headers: { "Content-Type": "application/json" },
    });
    return Array.isArray(response.data) ? response.data : [];
  } catch (error) {
    console.error("Error fetching CSF Scope data:", error);
    return [];
  }
};

const CSFScopeTable = () => {
  const [tableData, setTableData] = useState([]);
  const [expandedRows, setExpandedRows] = useState({});
  const [loading, setLoading] = useState(true);

  // Fetch data securely
  useEffect(() => {
    let isMounted = true;
    fetchCSFScopeData().then((data) => {
      if (isMounted) {
        setTableData(formatTableData(data));
        setLoading(false);
      }
    });
    return () => (isMounted = false);
  }, []);

  // Transform API response into hierarchical data
  const formatTableData = useCallback((data) => {
    const groupedData = [];
    const subcategoryMap = new Map();

    data.forEach((item) => {
      if (!subcategoryMap.has(item.subcategoryId)) {
        subcategoryMap.set(item.subcategoryId, {
          id: `subcat-${item.subcategoryId}`,
          subcategoryId: item.subcategoryId,
          subcategoryName: item.subcategoryName,
          relatedCsf1_1Subcategories: item.relatedCsf1_1Subcategories,
          isGroup: true,
        });
      }

      groupedData.push({
        id: `bu-${item.subcategoryId}-${item.businessUnitAbbreviation}`,
        parentId: `subcat-${item.subcategoryId}`,
        businessUnitAbbreviation: item.businessUnitAbbreviation,

        // Auditor Fields
        auditorIsInScope: item.auditorIsInScope,
        auditorJustification: item.auditorJustification,
        auditorProfileType: item.auditorProfileType,
        auditorConsumingFromBusinessUnit: item.auditorConsumingFromBusinessUnit,

        // Subcategory Owner Fields
        subcatOwnerAcceptRecommendation: item.subcatOwnerAcceptRecommendation,
        subcatOwnerIsInScope: item.subcatOwnerIsInScope,
        subcatOwnerJustification: item.subcatOwnerJustification,
        subcatOwnerProfileType: item.subcatOwnerProfileType,
        subcatOwnerConsumingFromBusinessUnit: item.subcatOwnerConsumingFromBusinessUnit,
      });
    });

    return [...subcategoryMap.values(), ...groupedData];
  }, []);

  // Toggle row expansion
  const toggleRowExpansion = useCallback((subcatId) => {
    setExpandedRows((prev) => ({
      ...prev,
      [subcatId]: !prev[subcatId],
    }));
  }, []);

  // Column Definitions
  const columns = useMemo(
    () => [
      {
        field: "subcategoryName",
        headerName: "CSF 2 Subcategory",
        width: 300,
        renderCell: (params) => {
          if (params.row.isGroup) {
            return (
              <Box display="flex" alignItems="center">
                <IconButton size="small" onClick={() => toggleRowExpansion(params.row.id)}>
                  {expandedRows[params.row.id] ? <ExpandMore /> : <ChevronRight />}
                </IconButton>
                <Typography variant="body1" fontWeight="bold">
                  {params.value}
                </Typography>
              </Box>
            );
          }
          return null;
        },
      },
      {
        field: "businessUnitAbbreviation",
        headerName: "Business Unit",
        width: 200,
        renderCell: (params) => (!params.row.isGroup ? params.value : null),
      },

      // Auditor Fields
      {
        field: "auditorIsInScope",
        headerName: "Auditor - In Scope?",
        width: 150,
        renderCell: (params) =>
          !params.row.isGroup ? (
            <Checkbox checked={!!params.value} onChange={() => {}} />
          ) : null,
      },
      { field: "auditorJustification", headerName: "Auditor - Justification", width: 250 },
      {
        field: "auditorProfileType",
        headerName: "Auditor - Profile Type",
        width: 200,
        renderCell: (params) =>
          !params.row.isGroup ? (
            <FormControl variant="standard" fullWidth>
              <Select defaultValue={params.value} onChange={() => {}}>
                <MenuItem value="Provider">Provider</MenuItem>
                <MenuItem value="Consumer">Consumer</MenuItem>
                <MenuItem value="Inheritor">Inheritor</MenuItem>
                <MenuItem value="Both">Both</MenuItem>
              </Select>
            </FormControl>
          ) : null,
      },

      // Subcategory Owner Fields (Only show if Accept Recommendation is No)
      {
        field: "subcatOwnerAcceptRecommendation",
        headerName: "Owner - Accept Recommendation?",
        width: 200,
        renderCell: (params) =>
          !params.row.isGroup ? (
            <Checkbox
              checked={!!params.value}
              onChange={(e) => {
                params.row.subcatOwnerAcceptRecommendation = e.target.checked;
              }}
            />
          ) : null,
      },
      {
        field: "subcatOwnerJustification",
        headerName: "Owner - Justification",
        width: 250,
        renderCell: (params) =>
          !params.row.isGroup && params.row.subcatOwnerAcceptRecommendation === false ? (
            <TextField variant="standard" fullWidth defaultValue={params.value} onChange={() => {}} />
          ) : null,
      },
    ],
    [expandedRows, toggleRowExpansion]
  );

  return (
    <div style={{ height: 600, width: "100%" }}>
      <Typography variant="h5" gutterBottom>
        CSF Scope Data
      </Typography>
      {loading ? (
        <p>Loading data...</p>
      ) : (
        <DataGrid
          rows={tableData.filter((row) => row.isGroup || expandedRows[row.parentId])}
          columns={columns}
          getRowId={(row) => row.id}
          pageSize={10}
          disableSelectionOnClick
        />
      )}
    </div>
  );
};

export default CSFScopeTable;
