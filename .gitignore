import React, { useEffect, useState } from 'react';
import { Dialog, DialogTitle, DialogContent, DialogActions, Button, TextField, Box, Typography, Snackbar, Alert, Chip } from '@mui/material';
import axios from 'axios';

const WorkerSearchModal = ({ open, onClose, onSelect, initialValue }) => {
  const [firstName, setFirstName] = useState('');
  const [lastName, setLastName] = useState('');
  const [loading, setLoading] = useState(false);
  const [results, setResults] = useState([]);
  const [selected, setSelected] = useState(initialValue ? initialValue.split(', ') : []);
  const [snackbar, setSnackbar] = useState({ open: false, message: '', severity: 'error' });

  // Clear fields when modal opens
  useEffect(() => {
    if (open) {
      setFirstName('');
      setLastName('');
      setResults([]);
      setSelected(initialValue ? initialValue.split(', ') : []);
    }
  }, [open, initialValue]);

  const searchWorkers = async () => {
    if (!firstName.trim() || !lastName.trim()) {
      setSnackbar({ open: true, message: 'Please enter both first and last names.', severity: 'error' });
      return;
    }
    setLoading(true);
    try {
      const response = await axios.get('/api/GetWorkerName', {
        params: { FirstName: firstName.trim(), LastName: lastName.trim() }
      });
      if (response.data.length === 0) {
        setSnackbar({ open: true, message: 'No workers found.', severity: 'error' });
      }
      setResults(response.data);
    } catch (error) {
      setSnackbar({ open: true, message: 'Error fetching workers.', severity: 'error' });
      setResults([]);
    } finally {
      setLoading(false);
    }
  };

  const toggleSelect = (nameFull) => {
    if (selected.includes(nameFull)) {
      setSelected(selected.filter(n => n !== nameFull));
    } else {
      setSelected([...selected, nameFull]);
    }
  };

  const handleDone = () => {
    onSelect(selected.join(', '));
    onClose();
  };

  return (
    <Dialog open={open} onClose={onClose} fullWidth maxWidth="sm">
      <DialogTitle>Search Worker</DialogTitle>
      <DialogContent>
        <TextField 
          label="First Name" 
          value={firstName} 
          onChange={e => setFirstName(e.target.value)} 
          fullWidth 
          margin="normal" 
        />
        <TextField 
          label="Last Name" 
          value={lastName} 
          onChange={e => setLastName(e.target.value)} 
          fullWidth 
          margin="normal" 
        />
        <Button onClick={searchWorkers} variant="contained" disabled={loading}>
          {loading ? 'Searching...' : 'Search'}
        </Button>
        {/* Show selected workers as Chips */}
        {selected.length > 0 && (
          <Box sx={{ mt: 2, display: 'flex', flexWrap: 'wrap', gap: 1 }}>
            {selected.map(workerName => (
              <Chip 
                key={workerName} 
                label={workerName} 
                onDelete={() => setSelected(selected.filter(n => n !== workerName))}
              />
            ))}
          </Box>
        )}
        {/* Show search results */}
        {results.length > 0 && (
          <Box mt={2}>
            <Typography variant="subtitle1">Select Worker(s):</Typography>
            {results.map(worker => (
              <Box 
                key={worker.NameFull} 
                display="flex" 
                alignItems="center" 
                onClick={() => toggleSelect(worker.NameFull)}
                sx={{ cursor: 'pointer', py: 0.5 }}
              >
                <input 
                  type="checkbox" 
                  checked={selected.includes(worker.NameFull)} 
                  readOnly 
                  style={{ marginRight: 8 }} 
                />
                <Typography>
                  {worker.NameFull} - {worker.JobTitle} (Supervisor: {worker.SupervisorFullName})
                </Typography>
              </Box>
            ))}
          </Box>
        )}
      </DialogContent>
      <DialogActions>
        <Button onClick={onClose}>Cancel</Button>
        <Button onClick={handleDone} variant="contained">Done</Button>
      </DialogActions>
      <Snackbar
        open={snackbar.open}
        autoHideDuration={4000}
        onClose={() => setSnackbar({ ...snackbar, open: false })}
      >
        <Alert onClose={() => setSnackbar({ ...snackbar, open: false })} severity={snackbar.severity}>
          {snackbar.message}
        </Alert>
      </Snackbar>
    </Dialog>
  );
};

export default WorkerSearchModal;
